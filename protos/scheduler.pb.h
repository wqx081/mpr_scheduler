// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduler.proto

#ifndef PROTOBUF_scheduler_2eproto__INCLUDED
#define PROTOBUF_scheduler_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace mprs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_scheduler_2eproto();
void protobuf_AssignDesc_scheduler_2eproto();
void protobuf_ShutdownFile_scheduler_2eproto();

class MprsCountWithSamples;
class MprsJobConfig;
class MprsJobConfigFilters;
class MprsJobHistogram;
class MprsJobHistogram_HistogramValue;

// ===================================================================

class MprsJobConfigFilters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mprs.MprsJobConfigFilters) */ {
 public:
  MprsJobConfigFilters();
  virtual ~MprsJobConfigFilters();

  MprsJobConfigFilters(const MprsJobConfigFilters& from);

  inline MprsJobConfigFilters& operator=(const MprsJobConfigFilters& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MprsJobConfigFilters& default_instance();

  void Swap(MprsJobConfigFilters* other);

  // implements Message ----------------------------------------------

  inline MprsJobConfigFilters* New() const { return New(NULL); }

  MprsJobConfigFilters* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MprsJobConfigFilters& from);
  void MergeFrom(const MprsJobConfigFilters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MprsJobConfigFilters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string white_list = 1;
  int white_list_size() const;
  void clear_white_list();
  static const int kWhiteListFieldNumber = 1;
  const ::std::string& white_list(int index) const;
  ::std::string* mutable_white_list(int index);
  void set_white_list(int index, const ::std::string& value);
  void set_white_list(int index, const char* value);
  void set_white_list(int index, const char* value, size_t size);
  ::std::string* add_white_list();
  void add_white_list(const ::std::string& value);
  void add_white_list(const char* value);
  void add_white_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& white_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_white_list();

  // optional string white_list_regex = 2;
  void clear_white_list_regex();
  static const int kWhiteListRegexFieldNumber = 2;
  const ::std::string& white_list_regex() const;
  void set_white_list_regex(const ::std::string& value);
  void set_white_list_regex(const char* value);
  void set_white_list_regex(const char* value, size_t size);
  ::std::string* mutable_white_list_regex();
  ::std::string* release_white_list_regex();
  void set_allocated_white_list_regex(::std::string* white_list_regex);

  // repeated string black_list = 3;
  int black_list_size() const;
  void clear_black_list();
  static const int kBlackListFieldNumber = 3;
  const ::std::string& black_list(int index) const;
  ::std::string* mutable_black_list(int index);
  void set_black_list(int index, const ::std::string& value);
  void set_black_list(int index, const char* value);
  void set_black_list(int index, const char* value, size_t size);
  ::std::string* add_black_list();
  void add_black_list(const ::std::string& value);
  void add_black_list(const char* value);
  void add_black_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& black_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_black_list();

  // optional string black_list_regex = 4;
  void clear_black_list_regex();
  static const int kBlackListRegexFieldNumber = 4;
  const ::std::string& black_list_regex() const;
  void set_black_list_regex(const ::std::string& value);
  void set_black_list_regex(const char* value);
  void set_black_list_regex(const char* value, size_t size);
  ::std::string* mutable_black_list_regex();
  ::std::string* release_black_list_regex();
  void set_allocated_black_list_regex(::std::string* black_list_regex);

  // optional double fraction_of_nodes = 5;
  void clear_fraction_of_nodes();
  static const int kFractionOfNodesFieldNumber = 5;
  double fraction_of_nodes() const;
  void set_fraction_of_nodes(double value);

  // repeated string tag_white_list = 6;
  int tag_white_list_size() const;
  void clear_tag_white_list();
  static const int kTagWhiteListFieldNumber = 6;
  const ::std::string& tag_white_list(int index) const;
  ::std::string* mutable_tag_white_list(int index);
  void set_tag_white_list(int index, const ::std::string& value);
  void set_tag_white_list(int index, const char* value);
  void set_tag_white_list(int index, const char* value, size_t size);
  ::std::string* add_tag_white_list();
  void add_tag_white_list(const ::std::string& value);
  void add_tag_white_list(const char* value);
  void add_tag_white_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tag_white_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag_white_list();

  // @@protoc_insertion_point(class_scope:mprs.MprsJobConfigFilters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> white_list_;
  ::google::protobuf::internal::ArenaStringPtr white_list_regex_;
  ::google::protobuf::RepeatedPtrField< ::std::string> black_list_;
  ::google::protobuf::internal::ArenaStringPtr black_list_regex_;
  double fraction_of_nodes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_white_list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static MprsJobConfigFilters* default_instance_;
};
// -------------------------------------------------------------------

class MprsJobConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mprs.MprsJobConfig) */ {
 public:
  MprsJobConfig();
  virtual ~MprsJobConfig();

  MprsJobConfig(const MprsJobConfig& from);

  inline MprsJobConfig& operator=(const MprsJobConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MprsJobConfig& default_instance();

  void Swap(MprsJobConfig* other);

  // implements Message ----------------------------------------------

  inline MprsJobConfig* New() const { return New(NULL); }

  MprsJobConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MprsJobConfig& from);
  void MergeFrom(const MprsJobConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MprsJobConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool enabled = 2;
  void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  bool enabled() const;
  void set_enabled(bool value);

  // optional string owner = 3;
  void clear_owner();
  static const int kOwnerFieldNumber = 3;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // map<string, int32> resources = 4;
  int resources_size() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      resources() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_resources();

  // optional string config = 5;
  void clear_config();
  static const int kConfigFieldNumber = 5;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  void set_config(const char* value);
  void set_config(const char* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // optional double priority = 6;
  void clear_priority();
  static const int kPriorityFieldNumber = 6;
  double priority() const;
  void set_priority(double value);

  // map<string, .mprs.MprsJobConfigFilters> filters = 7;
  int filters_size() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >&
      filters() const;
  ::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >*
      mutable_filters();

  // optional string error = 8;
  void clear_error();
  static const int kErrorFieldNumber = 8;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // repeated int32 backoff_of_values = 9;
  int backoff_of_values_size() const;
  void clear_backoff_of_values();
  static const int kBackoffOfValuesFieldNumber = 9;
  ::google::protobuf::int32 backoff_of_values(int index) const;
  void set_backoff_of_values(int index, ::google::protobuf::int32 value);
  void add_backoff_of_values(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      backoff_of_values() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_backoff_of_values();

  // optional bool backoff_of_repeat = 10;
  void clear_backoff_of_repeat();
  static const int kBackoffOfRepeatFieldNumber = 10;
  bool backoff_of_repeat() const;
  void set_backoff_of_repeat(bool value);

  // optional int64 create_time = 11;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 11;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // optional int64 modify_time = 12;
  void clear_modify_time();
  static const int kModifyTimeFieldNumber = 12;
  ::google::protobuf::int64 modify_time() const;
  void set_modify_time(::google::protobuf::int64 value);

  // optional string level_for_tasks = 13;
  void clear_level_for_tasks();
  static const int kLevelForTasksFieldNumber = 13;
  const ::std::string& level_for_tasks() const;
  void set_level_for_tasks(const ::std::string& value);
  void set_level_for_tasks(const char* value);
  void set_level_for_tasks(const char* value, size_t size);
  ::std::string* mutable_level_for_tasks();
  ::std::string* release_level_for_tasks();
  void set_allocated_level_for_tasks(::std::string* level_for_tasks);

  // optional string level_for_host_placement = 14;
  void clear_level_for_host_placement();
  static const int kLevelForHostPlacementFieldNumber = 14;
  const ::std::string& level_for_host_placement() const;
  void set_level_for_host_placement(const ::std::string& value);
  void set_level_for_host_placement(const char* value);
  void set_level_for_host_placement(const char* value, size_t size);
  ::std::string* mutable_level_for_host_placement();
  ::std::string* release_level_for_host_placement();
  void set_allocated_level_for_host_placement(::std::string* level_for_host_placement);

  // repeated string depends_on = 15;
  int depends_on_size() const;
  void clear_depends_on();
  static const int kDependsOnFieldNumber = 15;
  const ::std::string& depends_on(int index) const;
  ::std::string* mutable_depends_on(int index);
  void set_depends_on(int index, const ::std::string& value);
  void set_depends_on(int index, const char* value);
  void set_depends_on(int index, const char* value, size_t size);
  ::std::string* add_depends_on();
  void add_depends_on(const ::std::string& value);
  void add_depends_on(const char* value);
  void add_depends_on(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& depends_on() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_depends_on();

  // optional string host_placement = 16;
  void clear_host_placement();
  static const int kHostPlacementFieldNumber = 16;
  const ::std::string& host_placement() const;
  void set_host_placement(const ::std::string& value);
  void set_host_placement(const char* value);
  void set_host_placement(const char* value, size_t size);
  ::std::string* mutable_host_placement();
  ::std::string* release_host_placement();
  void set_allocated_host_placement(::std::string* host_placement);

  // optional double kill_orphan_tasks_after_second = 17;
  void clear_kill_orphan_tasks_after_second();
  static const int kKillOrphanTasksAfterSecondFieldNumber = 17;
  double kill_orphan_tasks_after_second() const;
  void set_kill_orphan_tasks_after_second(double value);

  // optional int64 version_id = 18;
  void clear_version_id();
  static const int kVersionIdFieldNumber = 18;
  ::google::protobuf::int64 version_id() const;
  void set_version_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mprs.MprsJobConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 >
      MprsJobConfig_ResourcesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > resources_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  double priority_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::mprs::MprsJobConfigFilters,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      MprsJobConfig_FiltersEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::mprs::MprsJobConfigFilters,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > filters_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > backoff_of_values_;
  mutable int _backoff_of_values_cached_byte_size_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 modify_time_;
  ::google::protobuf::internal::ArenaStringPtr level_for_tasks_;
  ::google::protobuf::internal::ArenaStringPtr level_for_host_placement_;
  ::google::protobuf::RepeatedPtrField< ::std::string> depends_on_;
  ::google::protobuf::internal::ArenaStringPtr host_placement_;
  double kill_orphan_tasks_after_second_;
  ::google::protobuf::int64 version_id_;
  bool enabled_;
  bool backoff_of_repeat_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static MprsJobConfig* default_instance_;
};
// -------------------------------------------------------------------

class MprsCountWithSamples : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mprs.MprsCountWithSamples) */ {
 public:
  MprsCountWithSamples();
  virtual ~MprsCountWithSamples();

  MprsCountWithSamples(const MprsCountWithSamples& from);

  inline MprsCountWithSamples& operator=(const MprsCountWithSamples& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MprsCountWithSamples& default_instance();

  void Swap(MprsCountWithSamples* other);

  // implements Message ----------------------------------------------

  inline MprsCountWithSamples* New() const { return New(NULL); }

  MprsCountWithSamples* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MprsCountWithSamples& from);
  void MergeFrom(const MprsCountWithSamples& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MprsCountWithSamples* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // repeated string samples = 2;
  int samples_size() const;
  void clear_samples();
  static const int kSamplesFieldNumber = 2;
  const ::std::string& samples(int index) const;
  ::std::string* mutable_samples(int index);
  void set_samples(int index, const ::std::string& value);
  void set_samples(int index, const char* value);
  void set_samples(int index, const char* value, size_t size);
  ::std::string* add_samples();
  void add_samples(const ::std::string& value);
  void add_samples(const char* value);
  void add_samples(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& samples() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_samples();

  // @@protoc_insertion_point(class_scope:mprs.MprsCountWithSamples)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> samples_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static MprsCountWithSamples* default_instance_;
};
// -------------------------------------------------------------------

class MprsJobHistogram_HistogramValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mprs.MprsJobHistogram.HistogramValue) */ {
 public:
  MprsJobHistogram_HistogramValue();
  virtual ~MprsJobHistogram_HistogramValue();

  MprsJobHistogram_HistogramValue(const MprsJobHistogram_HistogramValue& from);

  inline MprsJobHistogram_HistogramValue& operator=(const MprsJobHistogram_HistogramValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MprsJobHistogram_HistogramValue& default_instance();

  void Swap(MprsJobHistogram_HistogramValue* other);

  // implements Message ----------------------------------------------

  inline MprsJobHistogram_HistogramValue* New() const { return New(NULL); }

  MprsJobHistogram_HistogramValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MprsJobHistogram_HistogramValue& from);
  void MergeFrom(const MprsJobHistogram_HistogramValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MprsJobHistogram_HistogramValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, .mprs.MprsCountWithSamples> value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >&
      value() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:mprs.MprsJobHistogram.HistogramValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int32, ::mprs::MprsCountWithSamples,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      MprsJobHistogram_HistogramValue_ValueEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int32, ::mprs::MprsCountWithSamples,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static MprsJobHistogram_HistogramValue* default_instance_;
};
// -------------------------------------------------------------------

class MprsJobHistogram : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mprs.MprsJobHistogram) */ {
 public:
  MprsJobHistogram();
  virtual ~MprsJobHistogram();

  MprsJobHistogram(const MprsJobHistogram& from);

  inline MprsJobHistogram& operator=(const MprsJobHistogram& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MprsJobHistogram& default_instance();

  void Swap(MprsJobHistogram* other);

  // implements Message ----------------------------------------------

  inline MprsJobHistogram* New() const { return New(NULL); }

  MprsJobHistogram* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MprsJobHistogram& from);
  void MergeFrom(const MprsJobHistogram& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MprsJobHistogram* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MprsJobHistogram_HistogramValue HistogramValue;

  // accessors -------------------------------------------------------

  // optional string job = 1;
  void clear_job();
  static const int kJobFieldNumber = 1;
  const ::std::string& job() const;
  void set_job(const ::std::string& value);
  void set_job(const char* value);
  void set_job(const char* value, size_t size);
  ::std::string* mutable_job();
  ::std::string* release_job();
  void set_allocated_job(::std::string* job);

  // map<string, .mprs.MprsJobHistogram.HistogramValue> statuses = 2;
  int statuses_size() const;
  void clear_statuses();
  static const int kStatusesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >&
      statuses() const;
  ::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >*
      mutable_statuses();

  // @@protoc_insertion_point(class_scope:mprs.MprsJobHistogram)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr job_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::mprs::MprsJobHistogram_HistogramValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      MprsJobHistogram_StatusesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::mprs::MprsJobHistogram_HistogramValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > statuses_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static MprsJobHistogram* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MprsJobConfigFilters

// repeated string white_list = 1;
inline int MprsJobConfigFilters::white_list_size() const {
  return white_list_.size();
}
inline void MprsJobConfigFilters::clear_white_list() {
  white_list_.Clear();
}
inline const ::std::string& MprsJobConfigFilters::white_list(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.white_list)
  return white_list_.Get(index);
}
inline ::std::string* MprsJobConfigFilters::mutable_white_list(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfigFilters.white_list)
  return white_list_.Mutable(index);
}
inline void MprsJobConfigFilters::set_white_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.white_list)
  white_list_.Mutable(index)->assign(value);
}
inline void MprsJobConfigFilters::set_white_list(int index, const char* value) {
  white_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfigFilters.white_list)
}
inline void MprsJobConfigFilters::set_white_list(int index, const char* value, size_t size) {
  white_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfigFilters.white_list)
}
inline ::std::string* MprsJobConfigFilters::add_white_list() {
  // @@protoc_insertion_point(field_add_mutable:mprs.MprsJobConfigFilters.white_list)
  return white_list_.Add();
}
inline void MprsJobConfigFilters::add_white_list(const ::std::string& value) {
  white_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mprs.MprsJobConfigFilters.white_list)
}
inline void MprsJobConfigFilters::add_white_list(const char* value) {
  white_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mprs.MprsJobConfigFilters.white_list)
}
inline void MprsJobConfigFilters::add_white_list(const char* value, size_t size) {
  white_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mprs.MprsJobConfigFilters.white_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MprsJobConfigFilters::white_list() const {
  // @@protoc_insertion_point(field_list:mprs.MprsJobConfigFilters.white_list)
  return white_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MprsJobConfigFilters::mutable_white_list() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsJobConfigFilters.white_list)
  return &white_list_;
}

// optional string white_list_regex = 2;
inline void MprsJobConfigFilters::clear_white_list_regex() {
  white_list_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MprsJobConfigFilters::white_list_regex() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.white_list_regex)
  return white_list_regex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfigFilters::set_white_list_regex(const ::std::string& value) {
  
  white_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.white_list_regex)
}
inline void MprsJobConfigFilters::set_white_list_regex(const char* value) {
  
  white_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfigFilters.white_list_regex)
}
inline void MprsJobConfigFilters::set_white_list_regex(const char* value, size_t size) {
  
  white_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfigFilters.white_list_regex)
}
inline ::std::string* MprsJobConfigFilters::mutable_white_list_regex() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfigFilters.white_list_regex)
  return white_list_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MprsJobConfigFilters::release_white_list_regex() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfigFilters.white_list_regex)
  
  return white_list_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfigFilters::set_allocated_white_list_regex(::std::string* white_list_regex) {
  if (white_list_regex != NULL) {
    
  } else {
    
  }
  white_list_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), white_list_regex);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfigFilters.white_list_regex)
}

// repeated string black_list = 3;
inline int MprsJobConfigFilters::black_list_size() const {
  return black_list_.size();
}
inline void MprsJobConfigFilters::clear_black_list() {
  black_list_.Clear();
}
inline const ::std::string& MprsJobConfigFilters::black_list(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.black_list)
  return black_list_.Get(index);
}
inline ::std::string* MprsJobConfigFilters::mutable_black_list(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfigFilters.black_list)
  return black_list_.Mutable(index);
}
inline void MprsJobConfigFilters::set_black_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.black_list)
  black_list_.Mutable(index)->assign(value);
}
inline void MprsJobConfigFilters::set_black_list(int index, const char* value) {
  black_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfigFilters.black_list)
}
inline void MprsJobConfigFilters::set_black_list(int index, const char* value, size_t size) {
  black_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfigFilters.black_list)
}
inline ::std::string* MprsJobConfigFilters::add_black_list() {
  // @@protoc_insertion_point(field_add_mutable:mprs.MprsJobConfigFilters.black_list)
  return black_list_.Add();
}
inline void MprsJobConfigFilters::add_black_list(const ::std::string& value) {
  black_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mprs.MprsJobConfigFilters.black_list)
}
inline void MprsJobConfigFilters::add_black_list(const char* value) {
  black_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mprs.MprsJobConfigFilters.black_list)
}
inline void MprsJobConfigFilters::add_black_list(const char* value, size_t size) {
  black_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mprs.MprsJobConfigFilters.black_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MprsJobConfigFilters::black_list() const {
  // @@protoc_insertion_point(field_list:mprs.MprsJobConfigFilters.black_list)
  return black_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MprsJobConfigFilters::mutable_black_list() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsJobConfigFilters.black_list)
  return &black_list_;
}

// optional string black_list_regex = 4;
inline void MprsJobConfigFilters::clear_black_list_regex() {
  black_list_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MprsJobConfigFilters::black_list_regex() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.black_list_regex)
  return black_list_regex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfigFilters::set_black_list_regex(const ::std::string& value) {
  
  black_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.black_list_regex)
}
inline void MprsJobConfigFilters::set_black_list_regex(const char* value) {
  
  black_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfigFilters.black_list_regex)
}
inline void MprsJobConfigFilters::set_black_list_regex(const char* value, size_t size) {
  
  black_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfigFilters.black_list_regex)
}
inline ::std::string* MprsJobConfigFilters::mutable_black_list_regex() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfigFilters.black_list_regex)
  return black_list_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MprsJobConfigFilters::release_black_list_regex() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfigFilters.black_list_regex)
  
  return black_list_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfigFilters::set_allocated_black_list_regex(::std::string* black_list_regex) {
  if (black_list_regex != NULL) {
    
  } else {
    
  }
  black_list_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), black_list_regex);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfigFilters.black_list_regex)
}

// optional double fraction_of_nodes = 5;
inline void MprsJobConfigFilters::clear_fraction_of_nodes() {
  fraction_of_nodes_ = 0;
}
inline double MprsJobConfigFilters::fraction_of_nodes() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.fraction_of_nodes)
  return fraction_of_nodes_;
}
inline void MprsJobConfigFilters::set_fraction_of_nodes(double value) {
  
  fraction_of_nodes_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.fraction_of_nodes)
}

// repeated string tag_white_list = 6;
inline int MprsJobConfigFilters::tag_white_list_size() const {
  return tag_white_list_.size();
}
inline void MprsJobConfigFilters::clear_tag_white_list() {
  tag_white_list_.Clear();
}
inline const ::std::string& MprsJobConfigFilters::tag_white_list(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.tag_white_list)
  return tag_white_list_.Get(index);
}
inline ::std::string* MprsJobConfigFilters::mutable_tag_white_list(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfigFilters.tag_white_list)
  return tag_white_list_.Mutable(index);
}
inline void MprsJobConfigFilters::set_tag_white_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.tag_white_list)
  tag_white_list_.Mutable(index)->assign(value);
}
inline void MprsJobConfigFilters::set_tag_white_list(int index, const char* value) {
  tag_white_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfigFilters.tag_white_list)
}
inline void MprsJobConfigFilters::set_tag_white_list(int index, const char* value, size_t size) {
  tag_white_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfigFilters.tag_white_list)
}
inline ::std::string* MprsJobConfigFilters::add_tag_white_list() {
  // @@protoc_insertion_point(field_add_mutable:mprs.MprsJobConfigFilters.tag_white_list)
  return tag_white_list_.Add();
}
inline void MprsJobConfigFilters::add_tag_white_list(const ::std::string& value) {
  tag_white_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mprs.MprsJobConfigFilters.tag_white_list)
}
inline void MprsJobConfigFilters::add_tag_white_list(const char* value) {
  tag_white_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mprs.MprsJobConfigFilters.tag_white_list)
}
inline void MprsJobConfigFilters::add_tag_white_list(const char* value, size_t size) {
  tag_white_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mprs.MprsJobConfigFilters.tag_white_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MprsJobConfigFilters::tag_white_list() const {
  // @@protoc_insertion_point(field_list:mprs.MprsJobConfigFilters.tag_white_list)
  return tag_white_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MprsJobConfigFilters::mutable_tag_white_list() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsJobConfigFilters.tag_white_list)
  return &tag_white_list_;
}

// -------------------------------------------------------------------

// MprsJobConfig

// optional string name = 1;
inline void MprsJobConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MprsJobConfig::name() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.name)
}
inline void MprsJobConfig::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.name)
}
inline void MprsJobConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.name)
}
inline ::std::string* MprsJobConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MprsJobConfig::release_name() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.name)
}

// optional bool enabled = 2;
inline void MprsJobConfig::clear_enabled() {
  enabled_ = false;
}
inline bool MprsJobConfig::enabled() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.enabled)
  return enabled_;
}
inline void MprsJobConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.enabled)
}

// optional string owner = 3;
inline void MprsJobConfig::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MprsJobConfig::owner() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.owner)
  return owner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.owner)
}
inline void MprsJobConfig::set_owner(const char* value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.owner)
}
inline void MprsJobConfig::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.owner)
}
inline ::std::string* MprsJobConfig::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MprsJobConfig::release_owner() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.owner)
}

// map<string, int32> resources = 4;
inline int MprsJobConfig::resources_size() const {
  return resources_.size();
}
inline void MprsJobConfig::clear_resources() {
  resources_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
MprsJobConfig::resources() const {
  // @@protoc_insertion_point(field_map:mprs.MprsJobConfig.resources)
  return resources_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
MprsJobConfig::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_map:mprs.MprsJobConfig.resources)
  return resources_.MutableMap();
}

// optional string config = 5;
inline void MprsJobConfig::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MprsJobConfig::config() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.config)
  return config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.config)
}
inline void MprsJobConfig::set_config(const char* value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.config)
}
inline void MprsJobConfig::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.config)
}
inline ::std::string* MprsJobConfig::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MprsJobConfig::release_config() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.config)
}

// optional double priority = 6;
inline void MprsJobConfig::clear_priority() {
  priority_ = 0;
}
inline double MprsJobConfig::priority() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.priority)
  return priority_;
}
inline void MprsJobConfig::set_priority(double value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.priority)
}

// map<string, .mprs.MprsJobConfigFilters> filters = 7;
inline int MprsJobConfig::filters_size() const {
  return filters_.size();
}
inline void MprsJobConfig::clear_filters() {
  filters_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >&
MprsJobConfig::filters() const {
  // @@protoc_insertion_point(field_map:mprs.MprsJobConfig.filters)
  return filters_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >*
MprsJobConfig::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_map:mprs.MprsJobConfig.filters)
  return filters_.MutableMap();
}

// optional string error = 8;
inline void MprsJobConfig::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MprsJobConfig::error() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.error)
}
inline void MprsJobConfig::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.error)
}
inline void MprsJobConfig::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.error)
}
inline ::std::string* MprsJobConfig::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MprsJobConfig::release_error() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.error)
}

// repeated int32 backoff_of_values = 9;
inline int MprsJobConfig::backoff_of_values_size() const {
  return backoff_of_values_.size();
}
inline void MprsJobConfig::clear_backoff_of_values() {
  backoff_of_values_.Clear();
}
inline ::google::protobuf::int32 MprsJobConfig::backoff_of_values(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.backoff_of_values)
  return backoff_of_values_.Get(index);
}
inline void MprsJobConfig::set_backoff_of_values(int index, ::google::protobuf::int32 value) {
  backoff_of_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.backoff_of_values)
}
inline void MprsJobConfig::add_backoff_of_values(::google::protobuf::int32 value) {
  backoff_of_values_.Add(value);
  // @@protoc_insertion_point(field_add:mprs.MprsJobConfig.backoff_of_values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MprsJobConfig::backoff_of_values() const {
  // @@protoc_insertion_point(field_list:mprs.MprsJobConfig.backoff_of_values)
  return backoff_of_values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MprsJobConfig::mutable_backoff_of_values() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsJobConfig.backoff_of_values)
  return &backoff_of_values_;
}

// optional bool backoff_of_repeat = 10;
inline void MprsJobConfig::clear_backoff_of_repeat() {
  backoff_of_repeat_ = false;
}
inline bool MprsJobConfig::backoff_of_repeat() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.backoff_of_repeat)
  return backoff_of_repeat_;
}
inline void MprsJobConfig::set_backoff_of_repeat(bool value) {
  
  backoff_of_repeat_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.backoff_of_repeat)
}

// optional int64 create_time = 11;
inline void MprsJobConfig::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MprsJobConfig::create_time() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.create_time)
  return create_time_;
}
inline void MprsJobConfig::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.create_time)
}

// optional int64 modify_time = 12;
inline void MprsJobConfig::clear_modify_time() {
  modify_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MprsJobConfig::modify_time() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.modify_time)
  return modify_time_;
}
inline void MprsJobConfig::set_modify_time(::google::protobuf::int64 value) {
  
  modify_time_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.modify_time)
}

// optional string level_for_tasks = 13;
inline void MprsJobConfig::clear_level_for_tasks() {
  level_for_tasks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MprsJobConfig::level_for_tasks() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.level_for_tasks)
  return level_for_tasks_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_level_for_tasks(const ::std::string& value) {
  
  level_for_tasks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.level_for_tasks)
}
inline void MprsJobConfig::set_level_for_tasks(const char* value) {
  
  level_for_tasks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.level_for_tasks)
}
inline void MprsJobConfig::set_level_for_tasks(const char* value, size_t size) {
  
  level_for_tasks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.level_for_tasks)
}
inline ::std::string* MprsJobConfig::mutable_level_for_tasks() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.level_for_tasks)
  return level_for_tasks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MprsJobConfig::release_level_for_tasks() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.level_for_tasks)
  
  return level_for_tasks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_allocated_level_for_tasks(::std::string* level_for_tasks) {
  if (level_for_tasks != NULL) {
    
  } else {
    
  }
  level_for_tasks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level_for_tasks);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.level_for_tasks)
}

// optional string level_for_host_placement = 14;
inline void MprsJobConfig::clear_level_for_host_placement() {
  level_for_host_placement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MprsJobConfig::level_for_host_placement() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.level_for_host_placement)
  return level_for_host_placement_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_level_for_host_placement(const ::std::string& value) {
  
  level_for_host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.level_for_host_placement)
}
inline void MprsJobConfig::set_level_for_host_placement(const char* value) {
  
  level_for_host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.level_for_host_placement)
}
inline void MprsJobConfig::set_level_for_host_placement(const char* value, size_t size) {
  
  level_for_host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.level_for_host_placement)
}
inline ::std::string* MprsJobConfig::mutable_level_for_host_placement() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.level_for_host_placement)
  return level_for_host_placement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MprsJobConfig::release_level_for_host_placement() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.level_for_host_placement)
  
  return level_for_host_placement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_allocated_level_for_host_placement(::std::string* level_for_host_placement) {
  if (level_for_host_placement != NULL) {
    
  } else {
    
  }
  level_for_host_placement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level_for_host_placement);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.level_for_host_placement)
}

// repeated string depends_on = 15;
inline int MprsJobConfig::depends_on_size() const {
  return depends_on_.size();
}
inline void MprsJobConfig::clear_depends_on() {
  depends_on_.Clear();
}
inline const ::std::string& MprsJobConfig::depends_on(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.depends_on)
  return depends_on_.Get(index);
}
inline ::std::string* MprsJobConfig::mutable_depends_on(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.depends_on)
  return depends_on_.Mutable(index);
}
inline void MprsJobConfig::set_depends_on(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.depends_on)
  depends_on_.Mutable(index)->assign(value);
}
inline void MprsJobConfig::set_depends_on(int index, const char* value) {
  depends_on_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.depends_on)
}
inline void MprsJobConfig::set_depends_on(int index, const char* value, size_t size) {
  depends_on_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.depends_on)
}
inline ::std::string* MprsJobConfig::add_depends_on() {
  // @@protoc_insertion_point(field_add_mutable:mprs.MprsJobConfig.depends_on)
  return depends_on_.Add();
}
inline void MprsJobConfig::add_depends_on(const ::std::string& value) {
  depends_on_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mprs.MprsJobConfig.depends_on)
}
inline void MprsJobConfig::add_depends_on(const char* value) {
  depends_on_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mprs.MprsJobConfig.depends_on)
}
inline void MprsJobConfig::add_depends_on(const char* value, size_t size) {
  depends_on_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mprs.MprsJobConfig.depends_on)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MprsJobConfig::depends_on() const {
  // @@protoc_insertion_point(field_list:mprs.MprsJobConfig.depends_on)
  return depends_on_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MprsJobConfig::mutable_depends_on() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsJobConfig.depends_on)
  return &depends_on_;
}

// optional string host_placement = 16;
inline void MprsJobConfig::clear_host_placement() {
  host_placement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MprsJobConfig::host_placement() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.host_placement)
  return host_placement_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_host_placement(const ::std::string& value) {
  
  host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.host_placement)
}
inline void MprsJobConfig::set_host_placement(const char* value) {
  
  host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.host_placement)
}
inline void MprsJobConfig::set_host_placement(const char* value, size_t size) {
  
  host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.host_placement)
}
inline ::std::string* MprsJobConfig::mutable_host_placement() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.host_placement)
  return host_placement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MprsJobConfig::release_host_placement() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.host_placement)
  
  return host_placement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobConfig::set_allocated_host_placement(::std::string* host_placement) {
  if (host_placement != NULL) {
    
  } else {
    
  }
  host_placement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_placement);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.host_placement)
}

// optional double kill_orphan_tasks_after_second = 17;
inline void MprsJobConfig::clear_kill_orphan_tasks_after_second() {
  kill_orphan_tasks_after_second_ = 0;
}
inline double MprsJobConfig::kill_orphan_tasks_after_second() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.kill_orphan_tasks_after_second)
  return kill_orphan_tasks_after_second_;
}
inline void MprsJobConfig::set_kill_orphan_tasks_after_second(double value) {
  
  kill_orphan_tasks_after_second_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.kill_orphan_tasks_after_second)
}

// optional int64 version_id = 18;
inline void MprsJobConfig::clear_version_id() {
  version_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MprsJobConfig::version_id() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.version_id)
  return version_id_;
}
inline void MprsJobConfig::set_version_id(::google::protobuf::int64 value) {
  
  version_id_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.version_id)
}

// -------------------------------------------------------------------

// MprsCountWithSamples

// optional int32 count = 1;
inline void MprsCountWithSamples::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 MprsCountWithSamples::count() const {
  // @@protoc_insertion_point(field_get:mprs.MprsCountWithSamples.count)
  return count_;
}
inline void MprsCountWithSamples::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsCountWithSamples.count)
}

// repeated string samples = 2;
inline int MprsCountWithSamples::samples_size() const {
  return samples_.size();
}
inline void MprsCountWithSamples::clear_samples() {
  samples_.Clear();
}
inline const ::std::string& MprsCountWithSamples::samples(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsCountWithSamples.samples)
  return samples_.Get(index);
}
inline ::std::string* MprsCountWithSamples::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.MprsCountWithSamples.samples)
  return samples_.Mutable(index);
}
inline void MprsCountWithSamples::set_samples(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mprs.MprsCountWithSamples.samples)
  samples_.Mutable(index)->assign(value);
}
inline void MprsCountWithSamples::set_samples(int index, const char* value) {
  samples_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mprs.MprsCountWithSamples.samples)
}
inline void MprsCountWithSamples::set_samples(int index, const char* value, size_t size) {
  samples_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsCountWithSamples.samples)
}
inline ::std::string* MprsCountWithSamples::add_samples() {
  // @@protoc_insertion_point(field_add_mutable:mprs.MprsCountWithSamples.samples)
  return samples_.Add();
}
inline void MprsCountWithSamples::add_samples(const ::std::string& value) {
  samples_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mprs.MprsCountWithSamples.samples)
}
inline void MprsCountWithSamples::add_samples(const char* value) {
  samples_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mprs.MprsCountWithSamples.samples)
}
inline void MprsCountWithSamples::add_samples(const char* value, size_t size) {
  samples_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mprs.MprsCountWithSamples.samples)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MprsCountWithSamples::samples() const {
  // @@protoc_insertion_point(field_list:mprs.MprsCountWithSamples.samples)
  return samples_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MprsCountWithSamples::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsCountWithSamples.samples)
  return &samples_;
}

// -------------------------------------------------------------------

// MprsJobHistogram_HistogramValue

// map<int32, .mprs.MprsCountWithSamples> value = 1;
inline int MprsJobHistogram_HistogramValue::value_size() const {
  return value_.size();
}
inline void MprsJobHistogram_HistogramValue::clear_value() {
  value_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >&
MprsJobHistogram_HistogramValue::value() const {
  // @@protoc_insertion_point(field_map:mprs.MprsJobHistogram.HistogramValue.value)
  return value_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >*
MprsJobHistogram_HistogramValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable_map:mprs.MprsJobHistogram.HistogramValue.value)
  return value_.MutableMap();
}

// -------------------------------------------------------------------

// MprsJobHistogram

// optional string job = 1;
inline void MprsJobHistogram::clear_job() {
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MprsJobHistogram::job() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobHistogram.job)
  return job_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobHistogram::set_job(const ::std::string& value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobHistogram.job)
}
inline void MprsJobHistogram::set_job(const char* value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobHistogram.job)
}
inline void MprsJobHistogram::set_job(const char* value, size_t size) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobHistogram.job)
}
inline ::std::string* MprsJobHistogram::mutable_job() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobHistogram.job)
  return job_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MprsJobHistogram::release_job() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobHistogram.job)
  
  return job_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MprsJobHistogram::set_allocated_job(::std::string* job) {
  if (job != NULL) {
    
  } else {
    
  }
  job_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobHistogram.job)
}

// map<string, .mprs.MprsJobHistogram.HistogramValue> statuses = 2;
inline int MprsJobHistogram::statuses_size() const {
  return statuses_.size();
}
inline void MprsJobHistogram::clear_statuses() {
  statuses_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >&
MprsJobHistogram::statuses() const {
  // @@protoc_insertion_point(field_map:mprs.MprsJobHistogram.statuses)
  return statuses_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >*
MprsJobHistogram::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_map:mprs.MprsJobHistogram.statuses)
  return statuses_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mprs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_scheduler_2eproto__INCLUDED
