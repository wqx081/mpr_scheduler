// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduler.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scheduler.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mprs {

namespace {

const ::google::protobuf::Descriptor* MprsJobConfigFilters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MprsJobConfigFilters_reflection_ = NULL;
const ::google::protobuf::Descriptor* MprsJobConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MprsJobConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MprsJobConfig_ResourcesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MprsJobConfig_FiltersEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MprsCountWithSamples_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MprsCountWithSamples_reflection_ = NULL;
const ::google::protobuf::Descriptor* MprsJobHistogram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MprsJobHistogram_reflection_ = NULL;
const ::google::protobuf::Descriptor* MprsJobHistogram_HistogramValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MprsJobHistogram_HistogramValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MprsJobHistogram_HistogramValue_ValueEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MprsJobHistogram_StatusesEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_scheduler_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_scheduler_2eproto() {
  protobuf_AddDesc_scheduler_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "scheduler.proto");
  GOOGLE_CHECK(file != NULL);
  MprsJobConfigFilters_descriptor_ = file->message_type(0);
  static const int MprsJobConfigFilters_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfigFilters, white_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfigFilters, white_list_regex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfigFilters, black_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfigFilters, black_list_regex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfigFilters, fraction_of_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfigFilters, tag_white_list_),
  };
  MprsJobConfigFilters_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MprsJobConfigFilters_descriptor_,
      MprsJobConfigFilters::default_instance_,
      MprsJobConfigFilters_offsets_,
      -1,
      -1,
      -1,
      sizeof(MprsJobConfigFilters),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfigFilters, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfigFilters, _is_default_instance_));
  MprsJobConfig_descriptor_ = file->message_type(1);
  static const int MprsJobConfig_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, filters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, backoff_of_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, backoff_of_repeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, modify_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, level_for_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, level_for_host_placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, depends_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, host_placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, kill_orphan_tasks_after_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, version_id_),
  };
  MprsJobConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MprsJobConfig_descriptor_,
      MprsJobConfig::default_instance_,
      MprsJobConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(MprsJobConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobConfig, _is_default_instance_));
  MprsJobConfig_ResourcesEntry_descriptor_ = MprsJobConfig_descriptor_->nested_type(0);
  MprsJobConfig_FiltersEntry_descriptor_ = MprsJobConfig_descriptor_->nested_type(1);
  MprsCountWithSamples_descriptor_ = file->message_type(2);
  static const int MprsCountWithSamples_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsCountWithSamples, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsCountWithSamples, samples_),
  };
  MprsCountWithSamples_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MprsCountWithSamples_descriptor_,
      MprsCountWithSamples::default_instance_,
      MprsCountWithSamples_offsets_,
      -1,
      -1,
      -1,
      sizeof(MprsCountWithSamples),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsCountWithSamples, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsCountWithSamples, _is_default_instance_));
  MprsJobHistogram_descriptor_ = file->message_type(3);
  static const int MprsJobHistogram_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobHistogram, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobHistogram, statuses_),
  };
  MprsJobHistogram_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MprsJobHistogram_descriptor_,
      MprsJobHistogram::default_instance_,
      MprsJobHistogram_offsets_,
      -1,
      -1,
      -1,
      sizeof(MprsJobHistogram),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobHistogram, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobHistogram, _is_default_instance_));
  MprsJobHistogram_HistogramValue_descriptor_ = MprsJobHistogram_descriptor_->nested_type(0);
  static const int MprsJobHistogram_HistogramValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobHistogram_HistogramValue, value_),
  };
  MprsJobHistogram_HistogramValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MprsJobHistogram_HistogramValue_descriptor_,
      MprsJobHistogram_HistogramValue::default_instance_,
      MprsJobHistogram_HistogramValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(MprsJobHistogram_HistogramValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobHistogram_HistogramValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsJobHistogram_HistogramValue, _is_default_instance_));
  MprsJobHistogram_HistogramValue_ValueEntry_descriptor_ = MprsJobHistogram_HistogramValue_descriptor_->nested_type(0);
  MprsJobHistogram_StatusesEntry_descriptor_ = MprsJobHistogram_descriptor_->nested_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_scheduler_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MprsJobConfigFilters_descriptor_, &MprsJobConfigFilters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MprsJobConfig_descriptor_, &MprsJobConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MprsJobConfig_ResourcesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                MprsJobConfig_ResourcesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MprsJobConfig_FiltersEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::mprs::MprsJobConfigFilters,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                MprsJobConfig_FiltersEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MprsCountWithSamples_descriptor_, &MprsCountWithSamples::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MprsJobHistogram_descriptor_, &MprsJobHistogram::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MprsJobHistogram_HistogramValue_descriptor_, &MprsJobHistogram_HistogramValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MprsJobHistogram_HistogramValue_ValueEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::mprs::MprsCountWithSamples,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                MprsJobHistogram_HistogramValue_ValueEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MprsJobHistogram_StatusesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::mprs::MprsJobHistogram_HistogramValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                MprsJobHistogram_StatusesEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_scheduler_2eproto() {
  delete MprsJobConfigFilters::default_instance_;
  delete MprsJobConfigFilters_reflection_;
  delete MprsJobConfig::default_instance_;
  delete MprsJobConfig_reflection_;
  delete MprsCountWithSamples::default_instance_;
  delete MprsCountWithSamples_reflection_;
  delete MprsJobHistogram::default_instance_;
  delete MprsJobHistogram_reflection_;
  delete MprsJobHistogram_HistogramValue::default_instance_;
  delete MprsJobHistogram_HistogramValue_reflection_;
}

void protobuf_AddDesc_scheduler_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_scheduler_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mprs::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017scheduler.proto\022\004mprs\032\014common.proto\"\245\001"
    "\n\024MprsJobConfigFilters\022\022\n\nwhite_list\030\001 \003"
    "(\t\022\030\n\020white_list_regex\030\002 \001(\t\022\022\n\nblack_li"
    "st\030\003 \003(\t\022\030\n\020black_list_regex\030\004 \001(\t\022\031\n\021fr"
    "action_of_nodes\030\005 \001(\001\022\026\n\016tag_white_list\030"
    "\006 \003(\t\"\331\004\n\rMprsJobConfig\022\014\n\004name\030\001 \001(\t\022\017\n"
    "\007enabled\030\002 \001(\010\022\r\n\005owner\030\003 \001(\t\0225\n\tresourc"
    "es\030\004 \003(\0132\".mprs.MprsJobConfig.ResourcesE"
    "ntry\022\016\n\006config\030\005 \001(\t\022\020\n\010priority\030\006 \001(\001\0221"
    "\n\007filters\030\007 \003(\0132 .mprs.MprsJobConfig.Fil"
    "tersEntry\022\r\n\005error\030\010 \001(\t\022\031\n\021backoff_of_v"
    "alues\030\t \003(\005\022\031\n\021backoff_of_repeat\030\n \001(\010\022\023"
    "\n\013create_time\030\013 \001(\003\022\023\n\013modify_time\030\014 \001(\003"
    "\022\027\n\017level_for_tasks\030\r \001(\t\022 \n\030level_for_h"
    "ost_placement\030\016 \001(\t\022\022\n\ndepends_on\030\017 \003(\t\022"
    "\026\n\016host_placement\030\020 \001(\t\022&\n\036kill_orphan_t"
    "asks_after_second\030\021 \001(\001\022\022\n\nversion_id\030\022 "
    "\001(\003\0320\n\016ResourcesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
    "lue\030\002 \001(\005:\0028\001\032J\n\014FiltersEntry\022\013\n\003key\030\001 \001"
    "(\t\022)\n\005value\030\002 \001(\0132\032.mprs.MprsJobConfigFi"
    "lters:\0028\001\"6\n\024MprsCountWithSamples\022\r\n\005cou"
    "nt\030\001 \001(\005\022\017\n\007samples\030\002 \003(\t\"\315\002\n\020MprsJobHis"
    "togram\022\013\n\003job\030\001 \001(\t\0226\n\010statuses\030\002 \003(\0132$."
    "mprs.MprsJobHistogram.StatusesEntry\032\233\001\n\016"
    "HistogramValue\022\?\n\005value\030\001 \003(\01320.mprs.Mpr"
    "sJobHistogram.HistogramValue.ValueEntry\032"
    "H\n\nValueEntry\022\013\n\003key\030\001 \001(\005\022)\n\005value\030\002 \001("
    "\0132\032.mprs.MprsCountWithSamples:\0028\001\032V\n\rSta"
    "tusesEntry\022\013\n\003key\030\001 \001(\t\0224\n\005value\030\002 \001(\0132%"
    ".mprs.MprsJobHistogram.HistogramValue:\0028"
    "\001b\006proto3", 1209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "scheduler.proto", &protobuf_RegisterTypes);
  MprsJobConfigFilters::default_instance_ = new MprsJobConfigFilters();
  MprsJobConfig::default_instance_ = new MprsJobConfig();
  MprsCountWithSamples::default_instance_ = new MprsCountWithSamples();
  MprsJobHistogram::default_instance_ = new MprsJobHistogram();
  MprsJobHistogram_HistogramValue::default_instance_ = new MprsJobHistogram_HistogramValue();
  MprsJobConfigFilters::default_instance_->InitAsDefaultInstance();
  MprsJobConfig::default_instance_->InitAsDefaultInstance();
  MprsCountWithSamples::default_instance_->InitAsDefaultInstance();
  MprsJobHistogram::default_instance_->InitAsDefaultInstance();
  MprsJobHistogram_HistogramValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_scheduler_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_scheduler_2eproto {
  StaticDescriptorInitializer_scheduler_2eproto() {
    protobuf_AddDesc_scheduler_2eproto();
  }
} static_descriptor_initializer_scheduler_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MprsJobConfigFilters::kWhiteListFieldNumber;
const int MprsJobConfigFilters::kWhiteListRegexFieldNumber;
const int MprsJobConfigFilters::kBlackListFieldNumber;
const int MprsJobConfigFilters::kBlackListRegexFieldNumber;
const int MprsJobConfigFilters::kFractionOfNodesFieldNumber;
const int MprsJobConfigFilters::kTagWhiteListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MprsJobConfigFilters::MprsJobConfigFilters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.MprsJobConfigFilters)
}

void MprsJobConfigFilters::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MprsJobConfigFilters::MprsJobConfigFilters(const MprsJobConfigFilters& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.MprsJobConfigFilters)
}

void MprsJobConfigFilters::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  white_list_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  black_list_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fraction_of_nodes_ = 0;
}

MprsJobConfigFilters::~MprsJobConfigFilters() {
  // @@protoc_insertion_point(destructor:mprs.MprsJobConfigFilters)
  SharedDtor();
}

void MprsJobConfigFilters::SharedDtor() {
  white_list_regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  black_list_regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MprsJobConfigFilters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MprsJobConfigFilters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MprsJobConfigFilters_descriptor_;
}

const MprsJobConfigFilters& MprsJobConfigFilters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scheduler_2eproto();
  return *default_instance_;
}

MprsJobConfigFilters* MprsJobConfigFilters::default_instance_ = NULL;

MprsJobConfigFilters* MprsJobConfigFilters::New(::google::protobuf::Arena* arena) const {
  MprsJobConfigFilters* n = new MprsJobConfigFilters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MprsJobConfigFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.MprsJobConfigFilters)
  white_list_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  black_list_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fraction_of_nodes_ = 0;
  white_list_.Clear();
  black_list_.Clear();
  tag_white_list_.Clear();
}

bool MprsJobConfigFilters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.MprsJobConfigFilters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string white_list = 1;
      case 1: {
        if (tag == 10) {
         parse_white_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_white_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->white_list(this->white_list_size() - 1).data(),
            this->white_list(this->white_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfigFilters.white_list"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_white_list;
        if (input->ExpectTag(18)) goto parse_white_list_regex;
        break;
      }

      // optional string white_list_regex = 2;
      case 2: {
        if (tag == 18) {
         parse_white_list_regex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_white_list_regex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->white_list_regex().data(), this->white_list_regex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfigFilters.white_list_regex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_black_list;
        break;
      }

      // repeated string black_list = 3;
      case 3: {
        if (tag == 26) {
         parse_black_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_black_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->black_list(this->black_list_size() - 1).data(),
            this->black_list(this->black_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfigFilters.black_list"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_black_list;
        if (input->ExpectTag(34)) goto parse_black_list_regex;
        break;
      }

      // optional string black_list_regex = 4;
      case 4: {
        if (tag == 34) {
         parse_black_list_regex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_black_list_regex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->black_list_regex().data(), this->black_list_regex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfigFilters.black_list_regex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_fraction_of_nodes;
        break;
      }

      // optional double fraction_of_nodes = 5;
      case 5: {
        if (tag == 41) {
         parse_fraction_of_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fraction_of_nodes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tag_white_list;
        break;
      }

      // repeated string tag_white_list = 6;
      case 6: {
        if (tag == 50) {
         parse_tag_white_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag_white_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag_white_list(this->tag_white_list_size() - 1).data(),
            this->tag_white_list(this->tag_white_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfigFilters.tag_white_list"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tag_white_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.MprsJobConfigFilters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.MprsJobConfigFilters)
  return false;
#undef DO_
}

void MprsJobConfigFilters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.MprsJobConfigFilters)
  // repeated string white_list = 1;
  for (int i = 0; i < this->white_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->white_list(i).data(), this->white_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfigFilters.white_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->white_list(i), output);
  }

  // optional string white_list_regex = 2;
  if (this->white_list_regex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->white_list_regex().data(), this->white_list_regex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfigFilters.white_list_regex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->white_list_regex(), output);
  }

  // repeated string black_list = 3;
  for (int i = 0; i < this->black_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->black_list(i).data(), this->black_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfigFilters.black_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->black_list(i), output);
  }

  // optional string black_list_regex = 4;
  if (this->black_list_regex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->black_list_regex().data(), this->black_list_regex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfigFilters.black_list_regex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->black_list_regex(), output);
  }

  // optional double fraction_of_nodes = 5;
  if (this->fraction_of_nodes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fraction_of_nodes(), output);
  }

  // repeated string tag_white_list = 6;
  for (int i = 0; i < this->tag_white_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_white_list(i).data(), this->tag_white_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfigFilters.tag_white_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tag_white_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.MprsJobConfigFilters)
}

::google::protobuf::uint8* MprsJobConfigFilters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.MprsJobConfigFilters)
  // repeated string white_list = 1;
  for (int i = 0; i < this->white_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->white_list(i).data(), this->white_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfigFilters.white_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->white_list(i), target);
  }

  // optional string white_list_regex = 2;
  if (this->white_list_regex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->white_list_regex().data(), this->white_list_regex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfigFilters.white_list_regex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->white_list_regex(), target);
  }

  // repeated string black_list = 3;
  for (int i = 0; i < this->black_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->black_list(i).data(), this->black_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfigFilters.black_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->black_list(i), target);
  }

  // optional string black_list_regex = 4;
  if (this->black_list_regex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->black_list_regex().data(), this->black_list_regex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfigFilters.black_list_regex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->black_list_regex(), target);
  }

  // optional double fraction_of_nodes = 5;
  if (this->fraction_of_nodes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fraction_of_nodes(), target);
  }

  // repeated string tag_white_list = 6;
  for (int i = 0; i < this->tag_white_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_white_list(i).data(), this->tag_white_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfigFilters.tag_white_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->tag_white_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.MprsJobConfigFilters)
  return target;
}

int MprsJobConfigFilters::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.MprsJobConfigFilters)
  int total_size = 0;

  // optional string white_list_regex = 2;
  if (this->white_list_regex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->white_list_regex());
  }

  // optional string black_list_regex = 4;
  if (this->black_list_regex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->black_list_regex());
  }

  // optional double fraction_of_nodes = 5;
  if (this->fraction_of_nodes() != 0) {
    total_size += 1 + 8;
  }

  // repeated string white_list = 1;
  total_size += 1 * this->white_list_size();
  for (int i = 0; i < this->white_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->white_list(i));
  }

  // repeated string black_list = 3;
  total_size += 1 * this->black_list_size();
  for (int i = 0; i < this->black_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->black_list(i));
  }

  // repeated string tag_white_list = 6;
  total_size += 1 * this->tag_white_list_size();
  for (int i = 0; i < this->tag_white_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag_white_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MprsJobConfigFilters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.MprsJobConfigFilters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MprsJobConfigFilters* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MprsJobConfigFilters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.MprsJobConfigFilters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.MprsJobConfigFilters)
    MergeFrom(*source);
  }
}

void MprsJobConfigFilters::MergeFrom(const MprsJobConfigFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.MprsJobConfigFilters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  white_list_.MergeFrom(from.white_list_);
  black_list_.MergeFrom(from.black_list_);
  tag_white_list_.MergeFrom(from.tag_white_list_);
  if (from.white_list_regex().size() > 0) {

    white_list_regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.white_list_regex_);
  }
  if (from.black_list_regex().size() > 0) {

    black_list_regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.black_list_regex_);
  }
  if (from.fraction_of_nodes() != 0) {
    set_fraction_of_nodes(from.fraction_of_nodes());
  }
}

void MprsJobConfigFilters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.MprsJobConfigFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MprsJobConfigFilters::CopyFrom(const MprsJobConfigFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.MprsJobConfigFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MprsJobConfigFilters::IsInitialized() const {

  return true;
}

void MprsJobConfigFilters::Swap(MprsJobConfigFilters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MprsJobConfigFilters::InternalSwap(MprsJobConfigFilters* other) {
  white_list_.UnsafeArenaSwap(&other->white_list_);
  white_list_regex_.Swap(&other->white_list_regex_);
  black_list_.UnsafeArenaSwap(&other->black_list_);
  black_list_regex_.Swap(&other->black_list_regex_);
  std::swap(fraction_of_nodes_, other->fraction_of_nodes_);
  tag_white_list_.UnsafeArenaSwap(&other->tag_white_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MprsJobConfigFilters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MprsJobConfigFilters_descriptor_;
  metadata.reflection = MprsJobConfigFilters_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MprsJobConfigFilters

// repeated string white_list = 1;
int MprsJobConfigFilters::white_list_size() const {
  return white_list_.size();
}
void MprsJobConfigFilters::clear_white_list() {
  white_list_.Clear();
}
 const ::std::string& MprsJobConfigFilters::white_list(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.white_list)
  return white_list_.Get(index);
}
 ::std::string* MprsJobConfigFilters::mutable_white_list(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfigFilters.white_list)
  return white_list_.Mutable(index);
}
 void MprsJobConfigFilters::set_white_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.white_list)
  white_list_.Mutable(index)->assign(value);
}
 void MprsJobConfigFilters::set_white_list(int index, const char* value) {
  white_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfigFilters.white_list)
}
 void MprsJobConfigFilters::set_white_list(int index, const char* value, size_t size) {
  white_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfigFilters.white_list)
}
 ::std::string* MprsJobConfigFilters::add_white_list() {
  // @@protoc_insertion_point(field_add_mutable:mprs.MprsJobConfigFilters.white_list)
  return white_list_.Add();
}
 void MprsJobConfigFilters::add_white_list(const ::std::string& value) {
  white_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mprs.MprsJobConfigFilters.white_list)
}
 void MprsJobConfigFilters::add_white_list(const char* value) {
  white_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mprs.MprsJobConfigFilters.white_list)
}
 void MprsJobConfigFilters::add_white_list(const char* value, size_t size) {
  white_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mprs.MprsJobConfigFilters.white_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MprsJobConfigFilters::white_list() const {
  // @@protoc_insertion_point(field_list:mprs.MprsJobConfigFilters.white_list)
  return white_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MprsJobConfigFilters::mutable_white_list() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsJobConfigFilters.white_list)
  return &white_list_;
}

// optional string white_list_regex = 2;
void MprsJobConfigFilters::clear_white_list_regex() {
  white_list_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MprsJobConfigFilters::white_list_regex() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.white_list_regex)
  return white_list_regex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfigFilters::set_white_list_regex(const ::std::string& value) {
  
  white_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.white_list_regex)
}
 void MprsJobConfigFilters::set_white_list_regex(const char* value) {
  
  white_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfigFilters.white_list_regex)
}
 void MprsJobConfigFilters::set_white_list_regex(const char* value, size_t size) {
  
  white_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfigFilters.white_list_regex)
}
 ::std::string* MprsJobConfigFilters::mutable_white_list_regex() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfigFilters.white_list_regex)
  return white_list_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MprsJobConfigFilters::release_white_list_regex() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfigFilters.white_list_regex)
  
  return white_list_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfigFilters::set_allocated_white_list_regex(::std::string* white_list_regex) {
  if (white_list_regex != NULL) {
    
  } else {
    
  }
  white_list_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), white_list_regex);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfigFilters.white_list_regex)
}

// repeated string black_list = 3;
int MprsJobConfigFilters::black_list_size() const {
  return black_list_.size();
}
void MprsJobConfigFilters::clear_black_list() {
  black_list_.Clear();
}
 const ::std::string& MprsJobConfigFilters::black_list(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.black_list)
  return black_list_.Get(index);
}
 ::std::string* MprsJobConfigFilters::mutable_black_list(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfigFilters.black_list)
  return black_list_.Mutable(index);
}
 void MprsJobConfigFilters::set_black_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.black_list)
  black_list_.Mutable(index)->assign(value);
}
 void MprsJobConfigFilters::set_black_list(int index, const char* value) {
  black_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfigFilters.black_list)
}
 void MprsJobConfigFilters::set_black_list(int index, const char* value, size_t size) {
  black_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfigFilters.black_list)
}
 ::std::string* MprsJobConfigFilters::add_black_list() {
  // @@protoc_insertion_point(field_add_mutable:mprs.MprsJobConfigFilters.black_list)
  return black_list_.Add();
}
 void MprsJobConfigFilters::add_black_list(const ::std::string& value) {
  black_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mprs.MprsJobConfigFilters.black_list)
}
 void MprsJobConfigFilters::add_black_list(const char* value) {
  black_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mprs.MprsJobConfigFilters.black_list)
}
 void MprsJobConfigFilters::add_black_list(const char* value, size_t size) {
  black_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mprs.MprsJobConfigFilters.black_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MprsJobConfigFilters::black_list() const {
  // @@protoc_insertion_point(field_list:mprs.MprsJobConfigFilters.black_list)
  return black_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MprsJobConfigFilters::mutable_black_list() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsJobConfigFilters.black_list)
  return &black_list_;
}

// optional string black_list_regex = 4;
void MprsJobConfigFilters::clear_black_list_regex() {
  black_list_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MprsJobConfigFilters::black_list_regex() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.black_list_regex)
  return black_list_regex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfigFilters::set_black_list_regex(const ::std::string& value) {
  
  black_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.black_list_regex)
}
 void MprsJobConfigFilters::set_black_list_regex(const char* value) {
  
  black_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfigFilters.black_list_regex)
}
 void MprsJobConfigFilters::set_black_list_regex(const char* value, size_t size) {
  
  black_list_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfigFilters.black_list_regex)
}
 ::std::string* MprsJobConfigFilters::mutable_black_list_regex() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfigFilters.black_list_regex)
  return black_list_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MprsJobConfigFilters::release_black_list_regex() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfigFilters.black_list_regex)
  
  return black_list_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfigFilters::set_allocated_black_list_regex(::std::string* black_list_regex) {
  if (black_list_regex != NULL) {
    
  } else {
    
  }
  black_list_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), black_list_regex);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfigFilters.black_list_regex)
}

// optional double fraction_of_nodes = 5;
void MprsJobConfigFilters::clear_fraction_of_nodes() {
  fraction_of_nodes_ = 0;
}
 double MprsJobConfigFilters::fraction_of_nodes() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.fraction_of_nodes)
  return fraction_of_nodes_;
}
 void MprsJobConfigFilters::set_fraction_of_nodes(double value) {
  
  fraction_of_nodes_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.fraction_of_nodes)
}

// repeated string tag_white_list = 6;
int MprsJobConfigFilters::tag_white_list_size() const {
  return tag_white_list_.size();
}
void MprsJobConfigFilters::clear_tag_white_list() {
  tag_white_list_.Clear();
}
 const ::std::string& MprsJobConfigFilters::tag_white_list(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfigFilters.tag_white_list)
  return tag_white_list_.Get(index);
}
 ::std::string* MprsJobConfigFilters::mutable_tag_white_list(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfigFilters.tag_white_list)
  return tag_white_list_.Mutable(index);
}
 void MprsJobConfigFilters::set_tag_white_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfigFilters.tag_white_list)
  tag_white_list_.Mutable(index)->assign(value);
}
 void MprsJobConfigFilters::set_tag_white_list(int index, const char* value) {
  tag_white_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfigFilters.tag_white_list)
}
 void MprsJobConfigFilters::set_tag_white_list(int index, const char* value, size_t size) {
  tag_white_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfigFilters.tag_white_list)
}
 ::std::string* MprsJobConfigFilters::add_tag_white_list() {
  // @@protoc_insertion_point(field_add_mutable:mprs.MprsJobConfigFilters.tag_white_list)
  return tag_white_list_.Add();
}
 void MprsJobConfigFilters::add_tag_white_list(const ::std::string& value) {
  tag_white_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mprs.MprsJobConfigFilters.tag_white_list)
}
 void MprsJobConfigFilters::add_tag_white_list(const char* value) {
  tag_white_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mprs.MprsJobConfigFilters.tag_white_list)
}
 void MprsJobConfigFilters::add_tag_white_list(const char* value, size_t size) {
  tag_white_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mprs.MprsJobConfigFilters.tag_white_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MprsJobConfigFilters::tag_white_list() const {
  // @@protoc_insertion_point(field_list:mprs.MprsJobConfigFilters.tag_white_list)
  return tag_white_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MprsJobConfigFilters::mutable_tag_white_list() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsJobConfigFilters.tag_white_list)
  return &tag_white_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MprsJobConfig::kNameFieldNumber;
const int MprsJobConfig::kEnabledFieldNumber;
const int MprsJobConfig::kOwnerFieldNumber;
const int MprsJobConfig::kResourcesFieldNumber;
const int MprsJobConfig::kConfigFieldNumber;
const int MprsJobConfig::kPriorityFieldNumber;
const int MprsJobConfig::kFiltersFieldNumber;
const int MprsJobConfig::kErrorFieldNumber;
const int MprsJobConfig::kBackoffOfValuesFieldNumber;
const int MprsJobConfig::kBackoffOfRepeatFieldNumber;
const int MprsJobConfig::kCreateTimeFieldNumber;
const int MprsJobConfig::kModifyTimeFieldNumber;
const int MprsJobConfig::kLevelForTasksFieldNumber;
const int MprsJobConfig::kLevelForHostPlacementFieldNumber;
const int MprsJobConfig::kDependsOnFieldNumber;
const int MprsJobConfig::kHostPlacementFieldNumber;
const int MprsJobConfig::kKillOrphanTasksAfterSecondFieldNumber;
const int MprsJobConfig::kVersionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MprsJobConfig::MprsJobConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.MprsJobConfig)
}

void MprsJobConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MprsJobConfig::MprsJobConfig(const MprsJobConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.MprsJobConfig)
}

void MprsJobConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resources_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  resources_.SetEntryDescriptor(
      &::mprs::MprsJobConfig_ResourcesEntry_descriptor_);
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
  filters_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  filters_.SetEntryDescriptor(
      &::mprs::MprsJobConfig_FiltersEntry_descriptor_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backoff_of_repeat_ = false;
  create_time_ = GOOGLE_LONGLONG(0);
  modify_time_ = GOOGLE_LONGLONG(0);
  level_for_tasks_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_for_host_placement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_placement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kill_orphan_tasks_after_second_ = 0;
  version_id_ = GOOGLE_LONGLONG(0);
}

MprsJobConfig::~MprsJobConfig() {
  // @@protoc_insertion_point(destructor:mprs.MprsJobConfig)
  SharedDtor();
}

void MprsJobConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_for_tasks_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_for_host_placement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_placement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MprsJobConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MprsJobConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MprsJobConfig_descriptor_;
}

const MprsJobConfig& MprsJobConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scheduler_2eproto();
  return *default_instance_;
}

MprsJobConfig* MprsJobConfig::default_instance_ = NULL;

MprsJobConfig* MprsJobConfig::New(::google::protobuf::Arena* arena) const {
  MprsJobConfig* n = new MprsJobConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MprsJobConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.MprsJobConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MprsJobConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MprsJobConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(create_time_, modify_time_);
  backoff_of_repeat_ = false;
  level_for_tasks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_for_host_placement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_placement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(kill_orphan_tasks_after_second_, version_id_);

#undef ZR_HELPER_
#undef ZR_

  resources_.Clear();
  filters_.Clear();
  backoff_of_values_.Clear();
  depends_on_.Clear();
}

bool MprsJobConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.MprsJobConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfig.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 2;
      case 2: {
        if (tag == 16) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_owner;
        break;
      }

      // optional string owner = 3;
      case 3: {
        if (tag == 26) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfig.owner"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_resources;
        break;
      }

      // map<string, int32> resources = 4;
      case 4: {
        if (tag == 34) {
         parse_resources:
          DO_(input->IncrementRecursionDepth());
         parse_loop_resources:
          MprsJobConfig_ResourcesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&resources_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfig.ResourcesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_resources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_config;
        break;
      }

      // optional string config = 5;
      case 5: {
        if (tag == 42) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfig.config"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_priority;
        break;
      }

      // optional double priority = 6;
      case 6: {
        if (tag == 49) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &priority_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_filters;
        break;
      }

      // map<string, .mprs.MprsJobConfigFilters> filters = 7;
      case 7: {
        if (tag == 58) {
         parse_filters:
          DO_(input->IncrementRecursionDepth());
         parse_loop_filters:
          MprsJobConfig_FiltersEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::mprs::MprsJobConfigFilters,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters > > parser(&filters_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfig.FiltersEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_filters;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_error;
        break;
      }

      // optional string error = 8;
      case 8: {
        if (tag == 66) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfig.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_backoff_of_values;
        break;
      }

      // repeated int32 backoff_of_values = 9;
      case 9: {
        if (tag == 74) {
         parse_backoff_of_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_backoff_of_values())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_backoff_of_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_backoff_of_repeat;
        break;
      }

      // optional bool backoff_of_repeat = 10;
      case 10: {
        if (tag == 80) {
         parse_backoff_of_repeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backoff_of_repeat_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_create_time;
        break;
      }

      // optional int64 create_time = 11;
      case 11: {
        if (tag == 88) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_modify_time;
        break;
      }

      // optional int64 modify_time = 12;
      case 12: {
        if (tag == 96) {
         parse_modify_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modify_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_level_for_tasks;
        break;
      }

      // optional string level_for_tasks = 13;
      case 13: {
        if (tag == 106) {
         parse_level_for_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level_for_tasks()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level_for_tasks().data(), this->level_for_tasks().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfig.level_for_tasks"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_level_for_host_placement;
        break;
      }

      // optional string level_for_host_placement = 14;
      case 14: {
        if (tag == 114) {
         parse_level_for_host_placement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level_for_host_placement()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level_for_host_placement().data(), this->level_for_host_placement().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfig.level_for_host_placement"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_depends_on;
        break;
      }

      // repeated string depends_on = 15;
      case 15: {
        if (tag == 122) {
         parse_depends_on:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_depends_on()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->depends_on(this->depends_on_size() - 1).data(),
            this->depends_on(this->depends_on_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfig.depends_on"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_depends_on;
        if (input->ExpectTag(130)) goto parse_host_placement;
        break;
      }

      // optional string host_placement = 16;
      case 16: {
        if (tag == 130) {
         parse_host_placement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_placement()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_placement().data(), this->host_placement().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobConfig.host_placement"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_kill_orphan_tasks_after_second;
        break;
      }

      // optional double kill_orphan_tasks_after_second = 17;
      case 17: {
        if (tag == 137) {
         parse_kill_orphan_tasks_after_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kill_orphan_tasks_after_second_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_version_id;
        break;
      }

      // optional int64 version_id = 18;
      case 18: {
        if (tag == 144) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.MprsJobConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.MprsJobConfig)
  return false;
#undef DO_
}

void MprsJobConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.MprsJobConfig)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool enabled = 2;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->owner(), output);
  }

  // map<string, int32> resources = 4;
  if (!this->resources().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mprs.MprsJobConfig.ResourcesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->resources().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->resources().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->resources().begin();
          it != this->resources().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MprsJobConfig_ResourcesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(resources_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MprsJobConfig_ResourcesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->resources().begin();
          it != this->resources().end(); ++it) {
        entry.reset(resources_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string config = 5;
  if (this->config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->config(), output);
  }

  // optional double priority = 6;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->priority(), output);
  }

  // map<string, .mprs.MprsJobConfigFilters> filters = 7;
  if (!this->filters().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mprs.MprsJobConfig.FiltersEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->filters().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->filters().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >::const_iterator
          it = this->filters().begin();
          it != this->filters().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MprsJobConfig_FiltersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(filters_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MprsJobConfig_FiltersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >::const_iterator
          it = this->filters().begin();
          it != this->filters().end(); ++it) {
        entry.reset(filters_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string error = 8;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->error(), output);
  }

  // repeated int32 backoff_of_values = 9;
  if (this->backoff_of_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_backoff_of_values_cached_byte_size_);
  }
  for (int i = 0; i < this->backoff_of_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->backoff_of_values(i), output);
  }

  // optional bool backoff_of_repeat = 10;
  if (this->backoff_of_repeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->backoff_of_repeat(), output);
  }

  // optional int64 create_time = 11;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->create_time(), output);
  }

  // optional int64 modify_time = 12;
  if (this->modify_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->modify_time(), output);
  }

  // optional string level_for_tasks = 13;
  if (this->level_for_tasks().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level_for_tasks().data(), this->level_for_tasks().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.level_for_tasks");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->level_for_tasks(), output);
  }

  // optional string level_for_host_placement = 14;
  if (this->level_for_host_placement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level_for_host_placement().data(), this->level_for_host_placement().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.level_for_host_placement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->level_for_host_placement(), output);
  }

  // repeated string depends_on = 15;
  for (int i = 0; i < this->depends_on_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->depends_on(i).data(), this->depends_on(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.depends_on");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->depends_on(i), output);
  }

  // optional string host_placement = 16;
  if (this->host_placement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_placement().data(), this->host_placement().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.host_placement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->host_placement(), output);
  }

  // optional double kill_orphan_tasks_after_second = 17;
  if (this->kill_orphan_tasks_after_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->kill_orphan_tasks_after_second(), output);
  }

  // optional int64 version_id = 18;
  if (this->version_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->version_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.MprsJobConfig)
}

::google::protobuf::uint8* MprsJobConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.MprsJobConfig)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool enabled = 2;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->owner(), target);
  }

  // map<string, int32> resources = 4;
  if (!this->resources().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mprs.MprsJobConfig.ResourcesEntry.key");
      }
    };

    if (deterministic &&
        this->resources().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->resources().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->resources().begin();
          it != this->resources().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MprsJobConfig_ResourcesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(resources_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MprsJobConfig_ResourcesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->resources().begin();
          it != this->resources().end(); ++it) {
        entry.reset(resources_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string config = 5;
  if (this->config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->config(), target);
  }

  // optional double priority = 6;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->priority(), target);
  }

  // map<string, .mprs.MprsJobConfigFilters> filters = 7;
  if (!this->filters().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mprs.MprsJobConfig.FiltersEntry.key");
      }
    };

    if (deterministic &&
        this->filters().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->filters().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >::const_iterator
          it = this->filters().begin();
          it != this->filters().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MprsJobConfig_FiltersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(filters_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MprsJobConfig_FiltersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >::const_iterator
          it = this->filters().begin();
          it != this->filters().end(); ++it) {
        entry.reset(filters_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string error = 8;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->error(), target);
  }

  // repeated int32 backoff_of_values = 9;
  if (this->backoff_of_values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _backoff_of_values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->backoff_of_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->backoff_of_values(i), target);
  }

  // optional bool backoff_of_repeat = 10;
  if (this->backoff_of_repeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->backoff_of_repeat(), target);
  }

  // optional int64 create_time = 11;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->create_time(), target);
  }

  // optional int64 modify_time = 12;
  if (this->modify_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->modify_time(), target);
  }

  // optional string level_for_tasks = 13;
  if (this->level_for_tasks().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level_for_tasks().data(), this->level_for_tasks().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.level_for_tasks");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->level_for_tasks(), target);
  }

  // optional string level_for_host_placement = 14;
  if (this->level_for_host_placement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level_for_host_placement().data(), this->level_for_host_placement().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.level_for_host_placement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->level_for_host_placement(), target);
  }

  // repeated string depends_on = 15;
  for (int i = 0; i < this->depends_on_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->depends_on(i).data(), this->depends_on(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.depends_on");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->depends_on(i), target);
  }

  // optional string host_placement = 16;
  if (this->host_placement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_placement().data(), this->host_placement().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobConfig.host_placement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->host_placement(), target);
  }

  // optional double kill_orphan_tasks_after_second = 17;
  if (this->kill_orphan_tasks_after_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->kill_orphan_tasks_after_second(), target);
  }

  // optional int64 version_id = 18;
  if (this->version_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->version_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.MprsJobConfig)
  return target;
}

int MprsJobConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.MprsJobConfig)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner());
  }

  // optional string config = 5;
  if (this->config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config());
  }

  // optional double priority = 6;
  if (this->priority() != 0) {
    total_size += 1 + 8;
  }

  // optional string error = 8;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // optional bool backoff_of_repeat = 10;
  if (this->backoff_of_repeat() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 create_time = 11;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->create_time());
  }

  // optional int64 modify_time = 12;
  if (this->modify_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->modify_time());
  }

  // optional string level_for_tasks = 13;
  if (this->level_for_tasks().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level_for_tasks());
  }

  // optional string level_for_host_placement = 14;
  if (this->level_for_host_placement().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level_for_host_placement());
  }

  // optional string host_placement = 16;
  if (this->host_placement().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_placement());
  }

  // optional double kill_orphan_tasks_after_second = 17;
  if (this->kill_orphan_tasks_after_second() != 0) {
    total_size += 2 + 8;
  }

  // optional int64 version_id = 18;
  if (this->version_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version_id());
  }

  // map<string, int32> resources = 4;
  total_size += 1 * this->resources_size();
  {
    ::google::protobuf::scoped_ptr<MprsJobConfig_ResourcesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->resources().begin();
        it != this->resources().end(); ++it) {
      entry.reset(resources_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .mprs.MprsJobConfigFilters> filters = 7;
  total_size += 1 * this->filters_size();
  {
    ::google::protobuf::scoped_ptr<MprsJobConfig_FiltersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >::const_iterator
        it = this->filters().begin();
        it != this->filters().end(); ++it) {
      entry.reset(filters_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated int32 backoff_of_values = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->backoff_of_values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->backoff_of_values(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _backoff_of_values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string depends_on = 15;
  total_size += 1 * this->depends_on_size();
  for (int i = 0; i < this->depends_on_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->depends_on(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MprsJobConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.MprsJobConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MprsJobConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MprsJobConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.MprsJobConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.MprsJobConfig)
    MergeFrom(*source);
  }
}

void MprsJobConfig::MergeFrom(const MprsJobConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.MprsJobConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  resources_.MergeFrom(from.resources_);
  filters_.MergeFrom(from.filters_);
  backoff_of_values_.MergeFrom(from.backoff_of_values_);
  depends_on_.MergeFrom(from.depends_on_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.config().size() > 0) {

    config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.backoff_of_repeat() != 0) {
    set_backoff_of_repeat(from.backoff_of_repeat());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.modify_time() != 0) {
    set_modify_time(from.modify_time());
  }
  if (from.level_for_tasks().size() > 0) {

    level_for_tasks_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_for_tasks_);
  }
  if (from.level_for_host_placement().size() > 0) {

    level_for_host_placement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_for_host_placement_);
  }
  if (from.host_placement().size() > 0) {

    host_placement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_placement_);
  }
  if (from.kill_orphan_tasks_after_second() != 0) {
    set_kill_orphan_tasks_after_second(from.kill_orphan_tasks_after_second());
  }
  if (from.version_id() != 0) {
    set_version_id(from.version_id());
  }
}

void MprsJobConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.MprsJobConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MprsJobConfig::CopyFrom(const MprsJobConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.MprsJobConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MprsJobConfig::IsInitialized() const {

  return true;
}

void MprsJobConfig::Swap(MprsJobConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MprsJobConfig::InternalSwap(MprsJobConfig* other) {
  name_.Swap(&other->name_);
  std::swap(enabled_, other->enabled_);
  owner_.Swap(&other->owner_);
  resources_.Swap(&other->resources_);
  config_.Swap(&other->config_);
  std::swap(priority_, other->priority_);
  filters_.Swap(&other->filters_);
  error_.Swap(&other->error_);
  backoff_of_values_.UnsafeArenaSwap(&other->backoff_of_values_);
  std::swap(backoff_of_repeat_, other->backoff_of_repeat_);
  std::swap(create_time_, other->create_time_);
  std::swap(modify_time_, other->modify_time_);
  level_for_tasks_.Swap(&other->level_for_tasks_);
  level_for_host_placement_.Swap(&other->level_for_host_placement_);
  depends_on_.UnsafeArenaSwap(&other->depends_on_);
  host_placement_.Swap(&other->host_placement_);
  std::swap(kill_orphan_tasks_after_second_, other->kill_orphan_tasks_after_second_);
  std::swap(version_id_, other->version_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MprsJobConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MprsJobConfig_descriptor_;
  metadata.reflection = MprsJobConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MprsJobConfig

// optional string name = 1;
void MprsJobConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MprsJobConfig::name() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.name)
}
 void MprsJobConfig::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.name)
}
 void MprsJobConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.name)
}
 ::std::string* MprsJobConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MprsJobConfig::release_name() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.name)
}

// optional bool enabled = 2;
void MprsJobConfig::clear_enabled() {
  enabled_ = false;
}
 bool MprsJobConfig::enabled() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.enabled)
  return enabled_;
}
 void MprsJobConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.enabled)
}

// optional string owner = 3;
void MprsJobConfig::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MprsJobConfig::owner() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.owner)
  return owner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.owner)
}
 void MprsJobConfig::set_owner(const char* value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.owner)
}
 void MprsJobConfig::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.owner)
}
 ::std::string* MprsJobConfig::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MprsJobConfig::release_owner() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.owner)
}

// map<string, int32> resources = 4;
int MprsJobConfig::resources_size() const {
  return resources_.size();
}
void MprsJobConfig::clear_resources() {
  resources_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
MprsJobConfig::resources() const {
  // @@protoc_insertion_point(field_map:mprs.MprsJobConfig.resources)
  return resources_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
MprsJobConfig::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_map:mprs.MprsJobConfig.resources)
  return resources_.MutableMap();
}

// optional string config = 5;
void MprsJobConfig::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MprsJobConfig::config() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.config)
  return config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.config)
}
 void MprsJobConfig::set_config(const char* value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.config)
}
 void MprsJobConfig::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.config)
}
 ::std::string* MprsJobConfig::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MprsJobConfig::release_config() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.config)
}

// optional double priority = 6;
void MprsJobConfig::clear_priority() {
  priority_ = 0;
}
 double MprsJobConfig::priority() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.priority)
  return priority_;
}
 void MprsJobConfig::set_priority(double value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.priority)
}

// map<string, .mprs.MprsJobConfigFilters> filters = 7;
int MprsJobConfig::filters_size() const {
  return filters_.size();
}
void MprsJobConfig::clear_filters() {
  filters_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >&
MprsJobConfig::filters() const {
  // @@protoc_insertion_point(field_map:mprs.MprsJobConfig.filters)
  return filters_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::mprs::MprsJobConfigFilters >*
MprsJobConfig::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_map:mprs.MprsJobConfig.filters)
  return filters_.MutableMap();
}

// optional string error = 8;
void MprsJobConfig::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MprsJobConfig::error() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.error)
}
 void MprsJobConfig::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.error)
}
 void MprsJobConfig::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.error)
}
 ::std::string* MprsJobConfig::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MprsJobConfig::release_error() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.error)
}

// repeated int32 backoff_of_values = 9;
int MprsJobConfig::backoff_of_values_size() const {
  return backoff_of_values_.size();
}
void MprsJobConfig::clear_backoff_of_values() {
  backoff_of_values_.Clear();
}
 ::google::protobuf::int32 MprsJobConfig::backoff_of_values(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.backoff_of_values)
  return backoff_of_values_.Get(index);
}
 void MprsJobConfig::set_backoff_of_values(int index, ::google::protobuf::int32 value) {
  backoff_of_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.backoff_of_values)
}
 void MprsJobConfig::add_backoff_of_values(::google::protobuf::int32 value) {
  backoff_of_values_.Add(value);
  // @@protoc_insertion_point(field_add:mprs.MprsJobConfig.backoff_of_values)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MprsJobConfig::backoff_of_values() const {
  // @@protoc_insertion_point(field_list:mprs.MprsJobConfig.backoff_of_values)
  return backoff_of_values_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MprsJobConfig::mutable_backoff_of_values() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsJobConfig.backoff_of_values)
  return &backoff_of_values_;
}

// optional bool backoff_of_repeat = 10;
void MprsJobConfig::clear_backoff_of_repeat() {
  backoff_of_repeat_ = false;
}
 bool MprsJobConfig::backoff_of_repeat() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.backoff_of_repeat)
  return backoff_of_repeat_;
}
 void MprsJobConfig::set_backoff_of_repeat(bool value) {
  
  backoff_of_repeat_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.backoff_of_repeat)
}

// optional int64 create_time = 11;
void MprsJobConfig::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MprsJobConfig::create_time() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.create_time)
  return create_time_;
}
 void MprsJobConfig::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.create_time)
}

// optional int64 modify_time = 12;
void MprsJobConfig::clear_modify_time() {
  modify_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MprsJobConfig::modify_time() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.modify_time)
  return modify_time_;
}
 void MprsJobConfig::set_modify_time(::google::protobuf::int64 value) {
  
  modify_time_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.modify_time)
}

// optional string level_for_tasks = 13;
void MprsJobConfig::clear_level_for_tasks() {
  level_for_tasks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MprsJobConfig::level_for_tasks() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.level_for_tasks)
  return level_for_tasks_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_level_for_tasks(const ::std::string& value) {
  
  level_for_tasks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.level_for_tasks)
}
 void MprsJobConfig::set_level_for_tasks(const char* value) {
  
  level_for_tasks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.level_for_tasks)
}
 void MprsJobConfig::set_level_for_tasks(const char* value, size_t size) {
  
  level_for_tasks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.level_for_tasks)
}
 ::std::string* MprsJobConfig::mutable_level_for_tasks() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.level_for_tasks)
  return level_for_tasks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MprsJobConfig::release_level_for_tasks() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.level_for_tasks)
  
  return level_for_tasks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_allocated_level_for_tasks(::std::string* level_for_tasks) {
  if (level_for_tasks != NULL) {
    
  } else {
    
  }
  level_for_tasks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level_for_tasks);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.level_for_tasks)
}

// optional string level_for_host_placement = 14;
void MprsJobConfig::clear_level_for_host_placement() {
  level_for_host_placement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MprsJobConfig::level_for_host_placement() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.level_for_host_placement)
  return level_for_host_placement_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_level_for_host_placement(const ::std::string& value) {
  
  level_for_host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.level_for_host_placement)
}
 void MprsJobConfig::set_level_for_host_placement(const char* value) {
  
  level_for_host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.level_for_host_placement)
}
 void MprsJobConfig::set_level_for_host_placement(const char* value, size_t size) {
  
  level_for_host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.level_for_host_placement)
}
 ::std::string* MprsJobConfig::mutable_level_for_host_placement() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.level_for_host_placement)
  return level_for_host_placement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MprsJobConfig::release_level_for_host_placement() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.level_for_host_placement)
  
  return level_for_host_placement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_allocated_level_for_host_placement(::std::string* level_for_host_placement) {
  if (level_for_host_placement != NULL) {
    
  } else {
    
  }
  level_for_host_placement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level_for_host_placement);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.level_for_host_placement)
}

// repeated string depends_on = 15;
int MprsJobConfig::depends_on_size() const {
  return depends_on_.size();
}
void MprsJobConfig::clear_depends_on() {
  depends_on_.Clear();
}
 const ::std::string& MprsJobConfig::depends_on(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.depends_on)
  return depends_on_.Get(index);
}
 ::std::string* MprsJobConfig::mutable_depends_on(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.depends_on)
  return depends_on_.Mutable(index);
}
 void MprsJobConfig::set_depends_on(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.depends_on)
  depends_on_.Mutable(index)->assign(value);
}
 void MprsJobConfig::set_depends_on(int index, const char* value) {
  depends_on_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.depends_on)
}
 void MprsJobConfig::set_depends_on(int index, const char* value, size_t size) {
  depends_on_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.depends_on)
}
 ::std::string* MprsJobConfig::add_depends_on() {
  // @@protoc_insertion_point(field_add_mutable:mprs.MprsJobConfig.depends_on)
  return depends_on_.Add();
}
 void MprsJobConfig::add_depends_on(const ::std::string& value) {
  depends_on_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mprs.MprsJobConfig.depends_on)
}
 void MprsJobConfig::add_depends_on(const char* value) {
  depends_on_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mprs.MprsJobConfig.depends_on)
}
 void MprsJobConfig::add_depends_on(const char* value, size_t size) {
  depends_on_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mprs.MprsJobConfig.depends_on)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MprsJobConfig::depends_on() const {
  // @@protoc_insertion_point(field_list:mprs.MprsJobConfig.depends_on)
  return depends_on_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MprsJobConfig::mutable_depends_on() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsJobConfig.depends_on)
  return &depends_on_;
}

// optional string host_placement = 16;
void MprsJobConfig::clear_host_placement() {
  host_placement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MprsJobConfig::host_placement() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.host_placement)
  return host_placement_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_host_placement(const ::std::string& value) {
  
  host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.host_placement)
}
 void MprsJobConfig::set_host_placement(const char* value) {
  
  host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobConfig.host_placement)
}
 void MprsJobConfig::set_host_placement(const char* value, size_t size) {
  
  host_placement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobConfig.host_placement)
}
 ::std::string* MprsJobConfig::mutable_host_placement() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobConfig.host_placement)
  return host_placement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MprsJobConfig::release_host_placement() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobConfig.host_placement)
  
  return host_placement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobConfig::set_allocated_host_placement(::std::string* host_placement) {
  if (host_placement != NULL) {
    
  } else {
    
  }
  host_placement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_placement);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobConfig.host_placement)
}

// optional double kill_orphan_tasks_after_second = 17;
void MprsJobConfig::clear_kill_orphan_tasks_after_second() {
  kill_orphan_tasks_after_second_ = 0;
}
 double MprsJobConfig::kill_orphan_tasks_after_second() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.kill_orphan_tasks_after_second)
  return kill_orphan_tasks_after_second_;
}
 void MprsJobConfig::set_kill_orphan_tasks_after_second(double value) {
  
  kill_orphan_tasks_after_second_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.kill_orphan_tasks_after_second)
}

// optional int64 version_id = 18;
void MprsJobConfig::clear_version_id() {
  version_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MprsJobConfig::version_id() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobConfig.version_id)
  return version_id_;
}
 void MprsJobConfig::set_version_id(::google::protobuf::int64 value) {
  
  version_id_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsJobConfig.version_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MprsCountWithSamples::kCountFieldNumber;
const int MprsCountWithSamples::kSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MprsCountWithSamples::MprsCountWithSamples()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.MprsCountWithSamples)
}

void MprsCountWithSamples::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MprsCountWithSamples::MprsCountWithSamples(const MprsCountWithSamples& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.MprsCountWithSamples)
}

void MprsCountWithSamples::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  count_ = 0;
}

MprsCountWithSamples::~MprsCountWithSamples() {
  // @@protoc_insertion_point(destructor:mprs.MprsCountWithSamples)
  SharedDtor();
}

void MprsCountWithSamples::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MprsCountWithSamples::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MprsCountWithSamples::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MprsCountWithSamples_descriptor_;
}

const MprsCountWithSamples& MprsCountWithSamples::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scheduler_2eproto();
  return *default_instance_;
}

MprsCountWithSamples* MprsCountWithSamples::default_instance_ = NULL;

MprsCountWithSamples* MprsCountWithSamples::New(::google::protobuf::Arena* arena) const {
  MprsCountWithSamples* n = new MprsCountWithSamples;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MprsCountWithSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.MprsCountWithSamples)
  count_ = 0;
  samples_.Clear();
}

bool MprsCountWithSamples::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.MprsCountWithSamples)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_samples;
        break;
      }

      // repeated string samples = 2;
      case 2: {
        if (tag == 18) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_samples()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->samples(this->samples_size() - 1).data(),
            this->samples(this->samples_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsCountWithSamples.samples"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_samples;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.MprsCountWithSamples)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.MprsCountWithSamples)
  return false;
#undef DO_
}

void MprsCountWithSamples::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.MprsCountWithSamples)
  // optional int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated string samples = 2;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->samples(i).data(), this->samples(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsCountWithSamples.samples");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->samples(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.MprsCountWithSamples)
}

::google::protobuf::uint8* MprsCountWithSamples::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.MprsCountWithSamples)
  // optional int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated string samples = 2;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->samples(i).data(), this->samples(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsCountWithSamples.samples");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->samples(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.MprsCountWithSamples)
  return target;
}

int MprsCountWithSamples::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.MprsCountWithSamples)
  int total_size = 0;

  // optional int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // repeated string samples = 2;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->samples(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MprsCountWithSamples::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.MprsCountWithSamples)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MprsCountWithSamples* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MprsCountWithSamples>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.MprsCountWithSamples)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.MprsCountWithSamples)
    MergeFrom(*source);
  }
}

void MprsCountWithSamples::MergeFrom(const MprsCountWithSamples& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.MprsCountWithSamples)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  samples_.MergeFrom(from.samples_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void MprsCountWithSamples::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.MprsCountWithSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MprsCountWithSamples::CopyFrom(const MprsCountWithSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.MprsCountWithSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MprsCountWithSamples::IsInitialized() const {

  return true;
}

void MprsCountWithSamples::Swap(MprsCountWithSamples* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MprsCountWithSamples::InternalSwap(MprsCountWithSamples* other) {
  std::swap(count_, other->count_);
  samples_.UnsafeArenaSwap(&other->samples_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MprsCountWithSamples::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MprsCountWithSamples_descriptor_;
  metadata.reflection = MprsCountWithSamples_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MprsCountWithSamples

// optional int32 count = 1;
void MprsCountWithSamples::clear_count() {
  count_ = 0;
}
 ::google::protobuf::int32 MprsCountWithSamples::count() const {
  // @@protoc_insertion_point(field_get:mprs.MprsCountWithSamples.count)
  return count_;
}
 void MprsCountWithSamples::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsCountWithSamples.count)
}

// repeated string samples = 2;
int MprsCountWithSamples::samples_size() const {
  return samples_.size();
}
void MprsCountWithSamples::clear_samples() {
  samples_.Clear();
}
 const ::std::string& MprsCountWithSamples::samples(int index) const {
  // @@protoc_insertion_point(field_get:mprs.MprsCountWithSamples.samples)
  return samples_.Get(index);
}
 ::std::string* MprsCountWithSamples::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.MprsCountWithSamples.samples)
  return samples_.Mutable(index);
}
 void MprsCountWithSamples::set_samples(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mprs.MprsCountWithSamples.samples)
  samples_.Mutable(index)->assign(value);
}
 void MprsCountWithSamples::set_samples(int index, const char* value) {
  samples_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mprs.MprsCountWithSamples.samples)
}
 void MprsCountWithSamples::set_samples(int index, const char* value, size_t size) {
  samples_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsCountWithSamples.samples)
}
 ::std::string* MprsCountWithSamples::add_samples() {
  // @@protoc_insertion_point(field_add_mutable:mprs.MprsCountWithSamples.samples)
  return samples_.Add();
}
 void MprsCountWithSamples::add_samples(const ::std::string& value) {
  samples_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mprs.MprsCountWithSamples.samples)
}
 void MprsCountWithSamples::add_samples(const char* value) {
  samples_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mprs.MprsCountWithSamples.samples)
}
 void MprsCountWithSamples::add_samples(const char* value, size_t size) {
  samples_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mprs.MprsCountWithSamples.samples)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MprsCountWithSamples::samples() const {
  // @@protoc_insertion_point(field_list:mprs.MprsCountWithSamples.samples)
  return samples_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MprsCountWithSamples::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:mprs.MprsCountWithSamples.samples)
  return &samples_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MprsJobHistogram_HistogramValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MprsJobHistogram_HistogramValue::MprsJobHistogram_HistogramValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.MprsJobHistogram.HistogramValue)
}

void MprsJobHistogram_HistogramValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MprsJobHistogram_HistogramValue::MprsJobHistogram_HistogramValue(const MprsJobHistogram_HistogramValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.MprsJobHistogram.HistogramValue)
}

void MprsJobHistogram_HistogramValue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  value_.SetEntryDescriptor(
      &::mprs::MprsJobHistogram_HistogramValue_ValueEntry_descriptor_);
}

MprsJobHistogram_HistogramValue::~MprsJobHistogram_HistogramValue() {
  // @@protoc_insertion_point(destructor:mprs.MprsJobHistogram.HistogramValue)
  SharedDtor();
}

void MprsJobHistogram_HistogramValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MprsJobHistogram_HistogramValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MprsJobHistogram_HistogramValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MprsJobHistogram_HistogramValue_descriptor_;
}

const MprsJobHistogram_HistogramValue& MprsJobHistogram_HistogramValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scheduler_2eproto();
  return *default_instance_;
}

MprsJobHistogram_HistogramValue* MprsJobHistogram_HistogramValue::default_instance_ = NULL;

MprsJobHistogram_HistogramValue* MprsJobHistogram_HistogramValue::New(::google::protobuf::Arena* arena) const {
  MprsJobHistogram_HistogramValue* n = new MprsJobHistogram_HistogramValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MprsJobHistogram_HistogramValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.MprsJobHistogram.HistogramValue)
  value_.Clear();
}

bool MprsJobHistogram_HistogramValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.MprsJobHistogram.HistogramValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .mprs.MprsCountWithSamples> value = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_value:
          MprsJobHistogram_HistogramValue_ValueEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::mprs::MprsCountWithSamples,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples > > parser(&value_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_value;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.MprsJobHistogram.HistogramValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.MprsJobHistogram.HistogramValue)
  return false;
#undef DO_
}

void MprsJobHistogram_HistogramValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.MprsJobHistogram.HistogramValue)
  // map<int32, .mprs.MprsCountWithSamples> value = 1;
  if (!this->value().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->value().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->value().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MprsJobHistogram_HistogramValue_ValueEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<MprsJobHistogram_HistogramValue_ValueEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it) {
        entry.reset(value_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:mprs.MprsJobHistogram.HistogramValue)
}

::google::protobuf::uint8* MprsJobHistogram_HistogramValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.MprsJobHistogram.HistogramValue)
  // map<int32, .mprs.MprsCountWithSamples> value = 1;
  if (!this->value().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->value().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->value().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MprsJobHistogram_HistogramValue_ValueEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<MprsJobHistogram_HistogramValue_ValueEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it) {
        entry.reset(value_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.MprsJobHistogram.HistogramValue)
  return target;
}

int MprsJobHistogram_HistogramValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.MprsJobHistogram.HistogramValue)
  int total_size = 0;

  // map<int32, .mprs.MprsCountWithSamples> value = 1;
  total_size += 1 * this->value_size();
  {
    ::google::protobuf::scoped_ptr<MprsJobHistogram_HistogramValue_ValueEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >::const_iterator
        it = this->value().begin();
        it != this->value().end(); ++it) {
      entry.reset(value_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MprsJobHistogram_HistogramValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.MprsJobHistogram.HistogramValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MprsJobHistogram_HistogramValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MprsJobHistogram_HistogramValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.MprsJobHistogram.HistogramValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.MprsJobHistogram.HistogramValue)
    MergeFrom(*source);
  }
}

void MprsJobHistogram_HistogramValue::MergeFrom(const MprsJobHistogram_HistogramValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.MprsJobHistogram.HistogramValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
}

void MprsJobHistogram_HistogramValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.MprsJobHistogram.HistogramValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MprsJobHistogram_HistogramValue::CopyFrom(const MprsJobHistogram_HistogramValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.MprsJobHistogram.HistogramValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MprsJobHistogram_HistogramValue::IsInitialized() const {

  return true;
}

void MprsJobHistogram_HistogramValue::Swap(MprsJobHistogram_HistogramValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MprsJobHistogram_HistogramValue::InternalSwap(MprsJobHistogram_HistogramValue* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MprsJobHistogram_HistogramValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MprsJobHistogram_HistogramValue_descriptor_;
  metadata.reflection = MprsJobHistogram_HistogramValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MprsJobHistogram::kJobFieldNumber;
const int MprsJobHistogram::kStatusesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MprsJobHistogram::MprsJobHistogram()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.MprsJobHistogram)
}

void MprsJobHistogram::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MprsJobHistogram::MprsJobHistogram(const MprsJobHistogram& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.MprsJobHistogram)
}

void MprsJobHistogram::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statuses_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  statuses_.SetEntryDescriptor(
      &::mprs::MprsJobHistogram_StatusesEntry_descriptor_);
}

MprsJobHistogram::~MprsJobHistogram() {
  // @@protoc_insertion_point(destructor:mprs.MprsJobHistogram)
  SharedDtor();
}

void MprsJobHistogram::SharedDtor() {
  job_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MprsJobHistogram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MprsJobHistogram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MprsJobHistogram_descriptor_;
}

const MprsJobHistogram& MprsJobHistogram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scheduler_2eproto();
  return *default_instance_;
}

MprsJobHistogram* MprsJobHistogram::default_instance_ = NULL;

MprsJobHistogram* MprsJobHistogram::New(::google::protobuf::Arena* arena) const {
  MprsJobHistogram* n = new MprsJobHistogram;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MprsJobHistogram::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.MprsJobHistogram)
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statuses_.Clear();
}

bool MprsJobHistogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.MprsJobHistogram)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string job = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job().data(), this->job().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobHistogram.job"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statuses;
        break;
      }

      // map<string, .mprs.MprsJobHistogram.HistogramValue> statuses = 2;
      case 2: {
        if (tag == 18) {
         parse_statuses:
          DO_(input->IncrementRecursionDepth());
         parse_loop_statuses:
          MprsJobHistogram_StatusesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::mprs::MprsJobHistogram_HistogramValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue > > parser(&statuses_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsJobHistogram.StatusesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_statuses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.MprsJobHistogram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.MprsJobHistogram)
  return false;
#undef DO_
}

void MprsJobHistogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.MprsJobHistogram)
  // optional string job = 1;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobHistogram.job");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->job(), output);
  }

  // map<string, .mprs.MprsJobHistogram.HistogramValue> statuses = 2;
  if (!this->statuses().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mprs.MprsJobHistogram.StatusesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->statuses().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->statuses().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >::const_iterator
          it = this->statuses().begin();
          it != this->statuses().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MprsJobHistogram_StatusesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(statuses_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MprsJobHistogram_StatusesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >::const_iterator
          it = this->statuses().begin();
          it != this->statuses().end(); ++it) {
        entry.reset(statuses_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:mprs.MprsJobHistogram)
}

::google::protobuf::uint8* MprsJobHistogram::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.MprsJobHistogram)
  // optional string job = 1;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsJobHistogram.job");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->job(), target);
  }

  // map<string, .mprs.MprsJobHistogram.HistogramValue> statuses = 2;
  if (!this->statuses().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mprs.MprsJobHistogram.StatusesEntry.key");
      }
    };

    if (deterministic &&
        this->statuses().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->statuses().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >::const_iterator
          it = this->statuses().begin();
          it != this->statuses().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MprsJobHistogram_StatusesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(statuses_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MprsJobHistogram_StatusesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >::const_iterator
          it = this->statuses().begin();
          it != this->statuses().end(); ++it) {
        entry.reset(statuses_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.MprsJobHistogram)
  return target;
}

int MprsJobHistogram::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.MprsJobHistogram)
  int total_size = 0;

  // optional string job = 1;
  if (this->job().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job());
  }

  // map<string, .mprs.MprsJobHistogram.HistogramValue> statuses = 2;
  total_size += 1 * this->statuses_size();
  {
    ::google::protobuf::scoped_ptr<MprsJobHistogram_StatusesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >::const_iterator
        it = this->statuses().begin();
        it != this->statuses().end(); ++it) {
      entry.reset(statuses_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MprsJobHistogram::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.MprsJobHistogram)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MprsJobHistogram* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MprsJobHistogram>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.MprsJobHistogram)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.MprsJobHistogram)
    MergeFrom(*source);
  }
}

void MprsJobHistogram::MergeFrom(const MprsJobHistogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.MprsJobHistogram)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  statuses_.MergeFrom(from.statuses_);
  if (from.job().size() > 0) {

    job_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_);
  }
}

void MprsJobHistogram::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.MprsJobHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MprsJobHistogram::CopyFrom(const MprsJobHistogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.MprsJobHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MprsJobHistogram::IsInitialized() const {

  return true;
}

void MprsJobHistogram::Swap(MprsJobHistogram* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MprsJobHistogram::InternalSwap(MprsJobHistogram* other) {
  job_.Swap(&other->job_);
  statuses_.Swap(&other->statuses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MprsJobHistogram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MprsJobHistogram_descriptor_;
  metadata.reflection = MprsJobHistogram_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MprsJobHistogram_HistogramValue

// map<int32, .mprs.MprsCountWithSamples> value = 1;
int MprsJobHistogram_HistogramValue::value_size() const {
  return value_.size();
}
void MprsJobHistogram_HistogramValue::clear_value() {
  value_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >&
MprsJobHistogram_HistogramValue::value() const {
  // @@protoc_insertion_point(field_map:mprs.MprsJobHistogram.HistogramValue.value)
  return value_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::mprs::MprsCountWithSamples >*
MprsJobHistogram_HistogramValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable_map:mprs.MprsJobHistogram.HistogramValue.value)
  return value_.MutableMap();
}

// -------------------------------------------------------------------

// MprsJobHistogram

// optional string job = 1;
void MprsJobHistogram::clear_job() {
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MprsJobHistogram::job() const {
  // @@protoc_insertion_point(field_get:mprs.MprsJobHistogram.job)
  return job_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobHistogram::set_job(const ::std::string& value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsJobHistogram.job)
}
 void MprsJobHistogram::set_job(const char* value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsJobHistogram.job)
}
 void MprsJobHistogram::set_job(const char* value, size_t size) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsJobHistogram.job)
}
 ::std::string* MprsJobHistogram::mutable_job() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsJobHistogram.job)
  return job_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MprsJobHistogram::release_job() {
  // @@protoc_insertion_point(field_release:mprs.MprsJobHistogram.job)
  
  return job_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsJobHistogram::set_allocated_job(::std::string* job) {
  if (job != NULL) {
    
  } else {
    
  }
  job_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsJobHistogram.job)
}

// map<string, .mprs.MprsJobHistogram.HistogramValue> statuses = 2;
int MprsJobHistogram::statuses_size() const {
  return statuses_.size();
}
void MprsJobHistogram::clear_statuses() {
  statuses_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >&
MprsJobHistogram::statuses() const {
  // @@protoc_insertion_point(field_map:mprs.MprsJobHistogram.statuses)
  return statuses_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::mprs::MprsJobHistogram_HistogramValue >*
MprsJobHistogram::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_map:mprs.MprsJobHistogram.statuses)
  return statuses_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mprs

// @@protoc_insertion_point(global_scope)
