// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mprs {

namespace {

const ::google::protobuf::Descriptor* BackoffDuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackoffDuration_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogLines_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogLines_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeResources_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeResources_reflection_ = NULL;
const ::google::protobuf::Descriptor* MprsInstanceID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MprsInstanceID_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunningTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunningTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachinePortLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachinePortLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* MprsWorker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MprsWorker_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchedulerHeartbeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchedulerHeartbeatResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KillMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KilledTaskStatusFilter_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MprsTaskStatusBits_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  BackoffDuration_descriptor_ = file->message_type(0);
  static const int BackoffDuration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackoffDuration, no_more_backoffs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackoffDuration, seconds_),
  };
  BackoffDuration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BackoffDuration_descriptor_,
      BackoffDuration::default_instance_,
      BackoffDuration_offsets_,
      -1,
      -1,
      -1,
      sizeof(BackoffDuration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackoffDuration, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackoffDuration, _is_default_instance_));
  LogLine_descriptor_ = file->message_type(1);
  static const int LogLine_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLine, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLine, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLine, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLine, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLine, line_id_),
  };
  LogLine_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogLine_descriptor_,
      LogLine::default_instance_,
      LogLine_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogLine),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLine, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLine, _is_default_instance_));
  LogLines_descriptor_ = file->message_type(2);
  static const int LogLines_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLines, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLines, next_line_id_),
  };
  LogLines_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogLines_descriptor_,
      LogLines::default_instance_,
      LogLines_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogLines),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLines, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLines, _is_default_instance_));
  Resource_descriptor_ = file->message_type(3);
  static const int Resource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, amount_),
  };
  Resource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Resource_descriptor_,
      Resource::default_instance_,
      Resource_offsets_,
      -1,
      -1,
      -1,
      sizeof(Resource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _is_default_instance_));
  NodeResources_descriptor_ = file->message_type(4);
  static const int NodeResources_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeResources, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeResources, resources_),
  };
  NodeResources_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeResources_descriptor_,
      NodeResources::default_instance_,
      NodeResources_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeResources),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeResources, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeResources, _is_default_instance_));
  MprsInstanceID_descriptor_ = file->message_type(5);
  static const int MprsInstanceID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsInstanceID, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsInstanceID, rand_),
  };
  MprsInstanceID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MprsInstanceID_descriptor_,
      MprsInstanceID::default_instance_,
      MprsInstanceID_offsets_,
      -1,
      -1,
      -1,
      sizeof(MprsInstanceID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsInstanceID, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsInstanceID, _is_default_instance_));
  RunningTask_descriptor_ = file->message_type(6);
  static const int RunningTask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningTask, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningTask, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningTask, node_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningTask, worker_shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningTask, invocation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningTask, next_backoff_duration_),
  };
  RunningTask_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunningTask_descriptor_,
      RunningTask::default_instance_,
      RunningTask_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunningTask),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningTask, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningTask, _is_default_instance_));
  MachinePortLock_descriptor_ = file->message_type(7);
  static const int MachinePortLock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachinePortLock, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachinePortLock, port_),
  };
  MachinePortLock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MachinePortLock_descriptor_,
      MachinePortLock::default_instance_,
      MachinePortLock_offsets_,
      -1,
      -1,
      -1,
      sizeof(MachinePortLock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachinePortLock, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachinePortLock, _is_default_instance_));
  ServiceAddress_descriptor_ = file->message_type(8);
  static const int ServiceAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAddress, ip_or_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAddress, port_),
  };
  ServiceAddress_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceAddress_descriptor_,
      ServiceAddress::default_instance_,
      ServiceAddress_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServiceAddress),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAddress, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAddress, _is_default_instance_));
  MprsWorker_descriptor_ = file->message_type(9);
  static const int MprsWorker_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsWorker, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsWorker, machine_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsWorker, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsWorker, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsWorker, heartbeat_period_second_),
  };
  MprsWorker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MprsWorker_descriptor_,
      MprsWorker::default_instance_,
      MprsWorker_offsets_,
      -1,
      -1,
      -1,
      sizeof(MprsWorker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsWorker, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprsWorker, _is_default_instance_));
  SchedulerHeartbeatResponse_descriptor_ = file->message_type(10);
  static const int SchedulerHeartbeatResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerHeartbeatResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerHeartbeatResponse, max_health_check_gap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerHeartbeatResponse, heartbeat_grace_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerHeartbeatResponse, lose_unhealthy_worker_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerHeartbeatResponse, worker_check_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerHeartbeatResponse, worker_state_),
  };
  SchedulerHeartbeatResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SchedulerHeartbeatResponse_descriptor_,
      SchedulerHeartbeatResponse::default_instance_,
      SchedulerHeartbeatResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SchedulerHeartbeatResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerHeartbeatResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerHeartbeatResponse, _is_default_instance_));
  KillMethod_descriptor_ = file->enum_type(0);
  KilledTaskStatusFilter_descriptor_ = file->enum_type(1);
  MprsTaskStatusBits_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BackoffDuration_descriptor_, &BackoffDuration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogLine_descriptor_, &LogLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogLines_descriptor_, &LogLines::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Resource_descriptor_, &Resource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeResources_descriptor_, &NodeResources::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MprsInstanceID_descriptor_, &MprsInstanceID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunningTask_descriptor_, &RunningTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MachinePortLock_descriptor_, &MachinePortLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceAddress_descriptor_, &ServiceAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MprsWorker_descriptor_, &MprsWorker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SchedulerHeartbeatResponse_descriptor_, &SchedulerHeartbeatResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete BackoffDuration::default_instance_;
  delete BackoffDuration_reflection_;
  delete LogLine::default_instance_;
  delete LogLine_reflection_;
  delete LogLines::default_instance_;
  delete LogLines_reflection_;
  delete Resource::default_instance_;
  delete Resource_reflection_;
  delete NodeResources::default_instance_;
  delete NodeResources_reflection_;
  delete MprsInstanceID::default_instance_;
  delete MprsInstanceID_reflection_;
  delete RunningTask::default_instance_;
  delete RunningTask_reflection_;
  delete MachinePortLock::default_instance_;
  delete MachinePortLock_reflection_;
  delete ServiceAddress::default_instance_;
  delete ServiceAddress_reflection_;
  delete MprsWorker::default_instance_;
  delete MprsWorker_reflection_;
  delete SchedulerHeartbeatResponse::default_instance_;
  delete SchedulerHeartbeatResponse_reflection_;
}

void protobuf_AddDesc_common_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\004mprs\"<\n\017BackoffDuration\022"
    "\030\n\020no_more_backoffs\030\001 \001(\010\022\017\n\007seconds\030\002 \001"
    "(\005\"W\n\007LogLine\022\016\n\006job_id\030\001 \001(\t\022\017\n\007node_id"
    "\030\002 \001(\t\022\014\n\004time\030\003 \001(\005\022\014\n\004line\030\004 \001(\t\022\017\n\007li"
    "ne_id\030\005 \001(\003\">\n\010LogLines\022\034\n\005lines\030\001 \003(\0132\r"
    ".mprs.LogLine\022\024\n\014next_line_id\030\002 \001(\003\"(\n\010R"
    "esource\022\014\n\004name\030\001 \001(\t\022\016\n\006amount\030\002 \001(\005\"@\n"
    "\rNodeResources\022\014\n\004node\030\001 \001(\t\022!\n\tresource"
    "s\030\002 \003(\0132\016.mprs.Resource\"2\n\016MprsInstanceI"
    "D\022\022\n\nstart_time\030\001 \001(\003\022\014\n\004rand\030\002 \001(\003\"\316\001\n\013"
    "RunningTask\022\013\n\003job\030\001 \001(\t\022\014\n\004node\030\002 \001(\t\022+"
    "\n\016node_resources\030\003 \003(\0132\023.mprs.NodeResour"
    "ces\022\024\n\014worker_shard\030\004 \001(\t\022+\n\rinvocation_"
    "id\030\005 \001(\0132\024.mprs.MprsInstanceID\0224\n\025next_b"
    "ackoff_duration\030\006 \001(\0132\025.mprs.BackoffDura"
    "tion\"1\n\017MachinePortLock\022\020\n\010hostname\030\001 \001("
    "\t\022\014\n\004port\030\002 \001(\005\"2\n\016ServiceAddress\022\022\n\nip_"
    "or_host\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"\257\001\n\nMprsWork"
    "er\022\r\n\005shard\030\001 \001(\t\022+\n\014machine_lock\030\002 \001(\0132"
    "\025.mprs.MachinePortLock\022\"\n\004addr\030\003 \001(\0132\024.m"
    "prs.ServiceAddress\022 \n\002id\030\004 \001(\0132\024.mprs.Mp"
    "rsInstanceID\022\037\n\027heartbeat_period_second\030"
    "\005 \001(\005\"\326\001\n\032SchedulerHeartbeatResponse\022 \n\002"
    "id\030\001 \001(\0132\024.mprs.MprsInstanceID\022\034\n\024max_he"
    "alth_check_gap\030\002 \001(\005\022\036\n\026heartbeat_grace_"
    "period\030\003 \001(\005\022#\n\033lose_unhealthy_worker_af"
    "ter\030\004 \001(\005\022\035\n\025worker_check_interval\030\005 \001(\005"
    "\022\024\n\014worker_state\030\006 \001(\005*6\n\nKillMethod\022\024\n\020"
    "UnusedKillMethod\020\000\022\010\n\004SOFT\020\001\022\010\n\004HEAD\020\002*\242"
    "\001\n\026KilledTaskStatusFilter\022 \n\034UnusedKille"
    "dTaskStatusFilter\020\000\022\010\n\004NONE\020\001\022\030\n\024FORCE_D"
    "ONE_OR_FAILED\020\002\022$\n FORCE_DONE_OR_INCOMPL"
    "ETE_BACKOFF\020\003\022\034\n\030FORCE_DONE_OR_INCOMPLET"
    "E\020\004*\216\002\n\022MprsTaskStatusBits\022\034\n\030UnusedMprs"
    "TaskStatusBits\020\000\022\r\n\tUNSTARTED\020\001\022\013\n\007RUNNI"
    "NG\020\002\022\010\n\004DONE\020\004\022\016\n\nINCOMPLETE\020\010\022\n\n\006FAILED"
    "\020\020\022\t\n\005ERROR\020 \022\020\n\014USES_BACKOFF\020@\022\035\n\030DOES_"
    "NOT_ADVANCE_BACKOFF\020\200\004\022\022\n\rOVERWRITEABLE\020"
    "\200\010\022\030\n\023CURRENT_STATUS_MASK\020\377\014\022\014\n\007AVOIDED\020"
    "\200\001\022\r\n\010DISABLED\020\200\002\022\021\n\014CAN_RUN_MASK\020\200\003b\006pr"
    "oto3", 1604);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  BackoffDuration::default_instance_ = new BackoffDuration();
  LogLine::default_instance_ = new LogLine();
  LogLines::default_instance_ = new LogLines();
  Resource::default_instance_ = new Resource();
  NodeResources::default_instance_ = new NodeResources();
  MprsInstanceID::default_instance_ = new MprsInstanceID();
  RunningTask::default_instance_ = new RunningTask();
  MachinePortLock::default_instance_ = new MachinePortLock();
  ServiceAddress::default_instance_ = new ServiceAddress();
  MprsWorker::default_instance_ = new MprsWorker();
  SchedulerHeartbeatResponse::default_instance_ = new SchedulerHeartbeatResponse();
  BackoffDuration::default_instance_->InitAsDefaultInstance();
  LogLine::default_instance_->InitAsDefaultInstance();
  LogLines::default_instance_->InitAsDefaultInstance();
  Resource::default_instance_->InitAsDefaultInstance();
  NodeResources::default_instance_->InitAsDefaultInstance();
  MprsInstanceID::default_instance_->InitAsDefaultInstance();
  RunningTask::default_instance_->InitAsDefaultInstance();
  MachinePortLock::default_instance_->InitAsDefaultInstance();
  ServiceAddress::default_instance_->InitAsDefaultInstance();
  MprsWorker::default_instance_->InitAsDefaultInstance();
  SchedulerHeartbeatResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* KillMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillMethod_descriptor_;
}
bool KillMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KilledTaskStatusFilter_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KilledTaskStatusFilter_descriptor_;
}
bool KilledTaskStatusFilter_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MprsTaskStatusBits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MprsTaskStatusBits_descriptor_;
}
bool MprsTaskStatusBits_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 384:
    case 512:
    case 1024:
    case 1663:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackoffDuration::kNoMoreBackoffsFieldNumber;
const int BackoffDuration::kSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackoffDuration::BackoffDuration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.BackoffDuration)
}

void BackoffDuration::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BackoffDuration::BackoffDuration(const BackoffDuration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.BackoffDuration)
}

void BackoffDuration::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  no_more_backoffs_ = false;
  seconds_ = 0;
}

BackoffDuration::~BackoffDuration() {
  // @@protoc_insertion_point(destructor:mprs.BackoffDuration)
  SharedDtor();
}

void BackoffDuration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackoffDuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackoffDuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackoffDuration_descriptor_;
}

const BackoffDuration& BackoffDuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BackoffDuration* BackoffDuration::default_instance_ = NULL;

BackoffDuration* BackoffDuration::New(::google::protobuf::Arena* arena) const {
  BackoffDuration* n = new BackoffDuration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackoffDuration::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.BackoffDuration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BackoffDuration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BackoffDuration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(no_more_backoffs_, seconds_);

#undef ZR_HELPER_
#undef ZR_

}

bool BackoffDuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.BackoffDuration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool no_more_backoffs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_more_backoffs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seconds;
        break;
      }

      // optional int32 seconds = 2;
      case 2: {
        if (tag == 16) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.BackoffDuration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.BackoffDuration)
  return false;
#undef DO_
}

void BackoffDuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.BackoffDuration)
  // optional bool no_more_backoffs = 1;
  if (this->no_more_backoffs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->no_more_backoffs(), output);
  }

  // optional int32 seconds = 2;
  if (this->seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seconds(), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.BackoffDuration)
}

::google::protobuf::uint8* BackoffDuration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.BackoffDuration)
  // optional bool no_more_backoffs = 1;
  if (this->no_more_backoffs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->no_more_backoffs(), target);
  }

  // optional int32 seconds = 2;
  if (this->seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seconds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.BackoffDuration)
  return target;
}

int BackoffDuration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.BackoffDuration)
  int total_size = 0;

  // optional bool no_more_backoffs = 1;
  if (this->no_more_backoffs() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 seconds = 2;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackoffDuration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.BackoffDuration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BackoffDuration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BackoffDuration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.BackoffDuration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.BackoffDuration)
    MergeFrom(*source);
  }
}

void BackoffDuration::MergeFrom(const BackoffDuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.BackoffDuration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.no_more_backoffs() != 0) {
    set_no_more_backoffs(from.no_more_backoffs());
  }
  if (from.seconds() != 0) {
    set_seconds(from.seconds());
  }
}

void BackoffDuration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.BackoffDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackoffDuration::CopyFrom(const BackoffDuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.BackoffDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackoffDuration::IsInitialized() const {

  return true;
}

void BackoffDuration::Swap(BackoffDuration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackoffDuration::InternalSwap(BackoffDuration* other) {
  std::swap(no_more_backoffs_, other->no_more_backoffs_);
  std::swap(seconds_, other->seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackoffDuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackoffDuration_descriptor_;
  metadata.reflection = BackoffDuration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackoffDuration

// optional bool no_more_backoffs = 1;
void BackoffDuration::clear_no_more_backoffs() {
  no_more_backoffs_ = false;
}
 bool BackoffDuration::no_more_backoffs() const {
  // @@protoc_insertion_point(field_get:mprs.BackoffDuration.no_more_backoffs)
  return no_more_backoffs_;
}
 void BackoffDuration::set_no_more_backoffs(bool value) {
  
  no_more_backoffs_ = value;
  // @@protoc_insertion_point(field_set:mprs.BackoffDuration.no_more_backoffs)
}

// optional int32 seconds = 2;
void BackoffDuration::clear_seconds() {
  seconds_ = 0;
}
 ::google::protobuf::int32 BackoffDuration::seconds() const {
  // @@protoc_insertion_point(field_get:mprs.BackoffDuration.seconds)
  return seconds_;
}
 void BackoffDuration::set_seconds(::google::protobuf::int32 value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:mprs.BackoffDuration.seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogLine::kJobIdFieldNumber;
const int LogLine::kNodeIdFieldNumber;
const int LogLine::kTimeFieldNumber;
const int LogLine::kLineFieldNumber;
const int LogLine::kLineIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogLine::LogLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.LogLine)
}

void LogLine::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogLine::LogLine(const LogLine& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.LogLine)
}

void LogLine::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
  line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_id_ = GOOGLE_LONGLONG(0);
}

LogLine::~LogLine() {
  // @@protoc_insertion_point(destructor:mprs.LogLine)
  SharedDtor();
}

void LogLine::SharedDtor() {
  job_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogLine_descriptor_;
}

const LogLine& LogLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LogLine* LogLine::default_instance_ = NULL;

LogLine* LogLine::New(::google::protobuf::Arena* arena) const {
  LogLine* n = new LogLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogLine::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.LogLine)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogLine, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogLine*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(line_id_, time_);
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LogLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.LogLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string job_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job_id().data(), this->job_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.LogLine.job_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_id;
        break;
      }

      // optional string node_id = 2;
      case 2: {
        if (tag == 18) {
         parse_node_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.LogLine.node_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_line;
        break;
      }

      // optional string line = 4;
      case 4: {
        if (tag == 34) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->line().data(), this->line().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.LogLine.line"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_line_id;
        break;
      }

      // optional int64 line_id = 5;
      case 5: {
        if (tag == 40) {
         parse_line_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &line_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.LogLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.LogLine)
  return false;
#undef DO_
}

void LogLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.LogLine)
  // optional string job_id = 1;
  if (this->job_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.LogLine.job_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->job_id(), output);
  }

  // optional string node_id = 2;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.LogLine.node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_id(), output);
  }

  // optional int32 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional string line = 4;
  if (this->line().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line().data(), this->line().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.LogLine.line");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->line(), output);
  }

  // optional int64 line_id = 5;
  if (this->line_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->line_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.LogLine)
}

::google::protobuf::uint8* LogLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.LogLine)
  // optional string job_id = 1;
  if (this->job_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.LogLine.job_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->job_id(), target);
  }

  // optional string node_id = 2;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.LogLine.node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_id(), target);
  }

  // optional int32 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional string line = 4;
  if (this->line().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line().data(), this->line().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.LogLine.line");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->line(), target);
  }

  // optional int64 line_id = 5;
  if (this->line_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->line_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.LogLine)
  return target;
}

int LogLine::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.LogLine)
  int total_size = 0;

  // optional string job_id = 1;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job_id());
  }

  // optional string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // optional int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // optional string line = 4;
  if (this->line().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->line());
  }

  // optional int64 line_id = 5;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->line_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.LogLine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogLine* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.LogLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.LogLine)
    MergeFrom(*source);
  }
}

void LogLine::MergeFrom(const LogLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.LogLine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.job_id().size() > 0) {

    job_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_id_);
  }
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.line().size() > 0) {

    line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_);
  }
  if (from.line_id() != 0) {
    set_line_id(from.line_id());
  }
}

void LogLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.LogLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogLine::CopyFrom(const LogLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.LogLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogLine::IsInitialized() const {

  return true;
}

void LogLine::Swap(LogLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogLine::InternalSwap(LogLine* other) {
  job_id_.Swap(&other->job_id_);
  node_id_.Swap(&other->node_id_);
  std::swap(time_, other->time_);
  line_.Swap(&other->line_);
  std::swap(line_id_, other->line_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogLine_descriptor_;
  metadata.reflection = LogLine_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogLine

// optional string job_id = 1;
void LogLine::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogLine::job_id() const {
  // @@protoc_insertion_point(field_get:mprs.LogLine.job_id)
  return job_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogLine::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.LogLine.job_id)
}
 void LogLine::set_job_id(const char* value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.LogLine.job_id)
}
 void LogLine::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.LogLine.job_id)
}
 ::std::string* LogLine::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:mprs.LogLine.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogLine::release_job_id() {
  // @@protoc_insertion_point(field_release:mprs.LogLine.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogLine::set_allocated_job_id(::std::string* job_id) {
  if (job_id != NULL) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:mprs.LogLine.job_id)
}

// optional string node_id = 2;
void LogLine::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogLine::node_id() const {
  // @@protoc_insertion_point(field_get:mprs.LogLine.node_id)
  return node_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogLine::set_node_id(const ::std::string& value) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.LogLine.node_id)
}
 void LogLine::set_node_id(const char* value) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.LogLine.node_id)
}
 void LogLine::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.LogLine.node_id)
}
 ::std::string* LogLine::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:mprs.LogLine.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogLine::release_node_id() {
  // @@protoc_insertion_point(field_release:mprs.LogLine.node_id)
  
  return node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogLine::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:mprs.LogLine.node_id)
}

// optional int32 time = 3;
void LogLine::clear_time() {
  time_ = 0;
}
 ::google::protobuf::int32 LogLine::time() const {
  // @@protoc_insertion_point(field_get:mprs.LogLine.time)
  return time_;
}
 void LogLine::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:mprs.LogLine.time)
}

// optional string line = 4;
void LogLine::clear_line() {
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogLine::line() const {
  // @@protoc_insertion_point(field_get:mprs.LogLine.line)
  return line_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogLine::set_line(const ::std::string& value) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.LogLine.line)
}
 void LogLine::set_line(const char* value) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.LogLine.line)
}
 void LogLine::set_line(const char* value, size_t size) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.LogLine.line)
}
 ::std::string* LogLine::mutable_line() {
  
  // @@protoc_insertion_point(field_mutable:mprs.LogLine.line)
  return line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogLine::release_line() {
  // @@protoc_insertion_point(field_release:mprs.LogLine.line)
  
  return line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogLine::set_allocated_line(::std::string* line) {
  if (line != NULL) {
    
  } else {
    
  }
  line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line);
  // @@protoc_insertion_point(field_set_allocated:mprs.LogLine.line)
}

// optional int64 line_id = 5;
void LogLine::clear_line_id() {
  line_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LogLine::line_id() const {
  // @@protoc_insertion_point(field_get:mprs.LogLine.line_id)
  return line_id_;
}
 void LogLine::set_line_id(::google::protobuf::int64 value) {
  
  line_id_ = value;
  // @@protoc_insertion_point(field_set:mprs.LogLine.line_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogLines::kLinesFieldNumber;
const int LogLines::kNextLineIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogLines::LogLines()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.LogLines)
}

void LogLines::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogLines::LogLines(const LogLines& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.LogLines)
}

void LogLines::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  next_line_id_ = GOOGLE_LONGLONG(0);
}

LogLines::~LogLines() {
  // @@protoc_insertion_point(destructor:mprs.LogLines)
  SharedDtor();
}

void LogLines::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogLines::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogLines::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogLines_descriptor_;
}

const LogLines& LogLines::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LogLines* LogLines::default_instance_ = NULL;

LogLines* LogLines::New(::google::protobuf::Arena* arena) const {
  LogLines* n = new LogLines;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogLines::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.LogLines)
  next_line_id_ = GOOGLE_LONGLONG(0);
  lines_.Clear();
}

bool LogLines::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.LogLines)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mprs.LogLine lines = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_lines;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_next_line_id;
        break;
      }

      // optional int64 next_line_id = 2;
      case 2: {
        if (tag == 16) {
         parse_next_line_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_line_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.LogLines)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.LogLines)
  return false;
#undef DO_
}

void LogLines::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.LogLines)
  // repeated .mprs.LogLine lines = 1;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lines(i), output);
  }

  // optional int64 next_line_id = 2;
  if (this->next_line_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->next_line_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.LogLines)
}

::google::protobuf::uint8* LogLines::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.LogLines)
  // repeated .mprs.LogLine lines = 1;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lines(i), false, target);
  }

  // optional int64 next_line_id = 2;
  if (this->next_line_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->next_line_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.LogLines)
  return target;
}

int LogLines::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.LogLines)
  int total_size = 0;

  // optional int64 next_line_id = 2;
  if (this->next_line_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->next_line_id());
  }

  // repeated .mprs.LogLine lines = 1;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogLines::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.LogLines)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogLines* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogLines>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.LogLines)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.LogLines)
    MergeFrom(*source);
  }
}

void LogLines::MergeFrom(const LogLines& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.LogLines)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lines_.MergeFrom(from.lines_);
  if (from.next_line_id() != 0) {
    set_next_line_id(from.next_line_id());
  }
}

void LogLines::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.LogLines)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogLines::CopyFrom(const LogLines& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.LogLines)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogLines::IsInitialized() const {

  return true;
}

void LogLines::Swap(LogLines* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogLines::InternalSwap(LogLines* other) {
  lines_.UnsafeArenaSwap(&other->lines_);
  std::swap(next_line_id_, other->next_line_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogLines::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogLines_descriptor_;
  metadata.reflection = LogLines_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogLines

// repeated .mprs.LogLine lines = 1;
int LogLines::lines_size() const {
  return lines_.size();
}
void LogLines::clear_lines() {
  lines_.Clear();
}
const ::mprs::LogLine& LogLines::lines(int index) const {
  // @@protoc_insertion_point(field_get:mprs.LogLines.lines)
  return lines_.Get(index);
}
::mprs::LogLine* LogLines::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.LogLines.lines)
  return lines_.Mutable(index);
}
::mprs::LogLine* LogLines::add_lines() {
  // @@protoc_insertion_point(field_add:mprs.LogLines.lines)
  return lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::mprs::LogLine >*
LogLines::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:mprs.LogLines.lines)
  return &lines_;
}
const ::google::protobuf::RepeatedPtrField< ::mprs::LogLine >&
LogLines::lines() const {
  // @@protoc_insertion_point(field_list:mprs.LogLines.lines)
  return lines_;
}

// optional int64 next_line_id = 2;
void LogLines::clear_next_line_id() {
  next_line_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LogLines::next_line_id() const {
  // @@protoc_insertion_point(field_get:mprs.LogLines.next_line_id)
  return next_line_id_;
}
 void LogLines::set_next_line_id(::google::protobuf::int64 value) {
  
  next_line_id_ = value;
  // @@protoc_insertion_point(field_set:mprs.LogLines.next_line_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resource::kNameFieldNumber;
const int Resource::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resource::Resource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.Resource)
}

void Resource::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.Resource)
}

void Resource::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = 0;
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:mprs.Resource)
  SharedDtor();
}

void Resource::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}

const Resource& Resource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Resource* Resource::default_instance_ = NULL;

Resource* Resource::New(::google::protobuf::Arena* arena) const {
  Resource* n = new Resource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.Resource)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = 0;
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.Resource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.Resource.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int32 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.Resource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.Resource)
  return false;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.Resource)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.Resource.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.Resource)
}

::google::protobuf::uint8* Resource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.Resource)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.Resource.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 amount = 2;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.Resource)
  return target;
}

int Resource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.Resource)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->amount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.Resource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Resource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Resource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.Resource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.Resource)
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.Resource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {

  return true;
}

void Resource::Swap(Resource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resource::InternalSwap(Resource* other) {
  name_.Swap(&other->name_);
  std::swap(amount_, other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_descriptor_;
  metadata.reflection = Resource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Resource

// optional string name = 1;
void Resource::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Resource::name() const {
  // @@protoc_insertion_point(field_get:mprs.Resource.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Resource::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.Resource.name)
}
 void Resource::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.Resource.name)
}
 void Resource::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.Resource.name)
}
 ::std::string* Resource::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mprs.Resource.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Resource::release_name() {
  // @@protoc_insertion_point(field_release:mprs.Resource.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Resource::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mprs.Resource.name)
}

// optional int32 amount = 2;
void Resource::clear_amount() {
  amount_ = 0;
}
 ::google::protobuf::int32 Resource::amount() const {
  // @@protoc_insertion_point(field_get:mprs.Resource.amount)
  return amount_;
}
 void Resource::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:mprs.Resource.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeResources::kNodeFieldNumber;
const int NodeResources::kResourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeResources::NodeResources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.NodeResources)
}

void NodeResources::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodeResources::NodeResources(const NodeResources& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.NodeResources)
}

void NodeResources::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NodeResources::~NodeResources() {
  // @@protoc_insertion_point(destructor:mprs.NodeResources)
  SharedDtor();
}

void NodeResources::SharedDtor() {
  node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NodeResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeResources::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeResources_descriptor_;
}

const NodeResources& NodeResources::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NodeResources* NodeResources::default_instance_ = NULL;

NodeResources* NodeResources::New(::google::protobuf::Arena* arena) const {
  NodeResources* n = new NodeResources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeResources::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.NodeResources)
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resources_.Clear();
}

bool NodeResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.NodeResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), this->node().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.NodeResources.node"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        break;
      }

      // repeated .mprs.Resource resources = 2;
      case 2: {
        if (tag == 18) {
         parse_resources:
          DO_(input->IncrementRecursionDepth());
         parse_loop_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_resources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.NodeResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.NodeResources)
  return false;
#undef DO_
}

void NodeResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.NodeResources)
  // optional string node = 1;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.NodeResources.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node(), output);
  }

  // repeated .mprs.Resource resources = 2;
  for (unsigned int i = 0, n = this->resources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resources(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.NodeResources)
}

::google::protobuf::uint8* NodeResources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.NodeResources)
  // optional string node = 1;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.NodeResources.node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node(), target);
  }

  // repeated .mprs.Resource resources = 2;
  for (unsigned int i = 0, n = this->resources_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->resources(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.NodeResources)
  return target;
}

int NodeResources::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.NodeResources)
  int total_size = 0;

  // optional string node = 1;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node());
  }

  // repeated .mprs.Resource resources = 2;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeResources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.NodeResources)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeResources* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeResources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.NodeResources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.NodeResources)
    MergeFrom(*source);
  }
}

void NodeResources::MergeFrom(const NodeResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.NodeResources)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  resources_.MergeFrom(from.resources_);
  if (from.node().size() > 0) {

    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
}

void NodeResources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.NodeResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeResources::CopyFrom(const NodeResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.NodeResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeResources::IsInitialized() const {

  return true;
}

void NodeResources::Swap(NodeResources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeResources::InternalSwap(NodeResources* other) {
  node_.Swap(&other->node_);
  resources_.UnsafeArenaSwap(&other->resources_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeResources::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeResources_descriptor_;
  metadata.reflection = NodeResources_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeResources

// optional string node = 1;
void NodeResources::clear_node() {
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NodeResources::node() const {
  // @@protoc_insertion_point(field_get:mprs.NodeResources.node)
  return node_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeResources::set_node(const ::std::string& value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.NodeResources.node)
}
 void NodeResources::set_node(const char* value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.NodeResources.node)
}
 void NodeResources::set_node(const char* value, size_t size) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.NodeResources.node)
}
 ::std::string* NodeResources::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:mprs.NodeResources.node)
  return node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NodeResources::release_node() {
  // @@protoc_insertion_point(field_release:mprs.NodeResources.node)
  
  return node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeResources::set_allocated_node(::std::string* node) {
  if (node != NULL) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:mprs.NodeResources.node)
}

// repeated .mprs.Resource resources = 2;
int NodeResources::resources_size() const {
  return resources_.size();
}
void NodeResources::clear_resources() {
  resources_.Clear();
}
const ::mprs::Resource& NodeResources::resources(int index) const {
  // @@protoc_insertion_point(field_get:mprs.NodeResources.resources)
  return resources_.Get(index);
}
::mprs::Resource* NodeResources::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.NodeResources.resources)
  return resources_.Mutable(index);
}
::mprs::Resource* NodeResources::add_resources() {
  // @@protoc_insertion_point(field_add:mprs.NodeResources.resources)
  return resources_.Add();
}
::google::protobuf::RepeatedPtrField< ::mprs::Resource >*
NodeResources::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:mprs.NodeResources.resources)
  return &resources_;
}
const ::google::protobuf::RepeatedPtrField< ::mprs::Resource >&
NodeResources::resources() const {
  // @@protoc_insertion_point(field_list:mprs.NodeResources.resources)
  return resources_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MprsInstanceID::kStartTimeFieldNumber;
const int MprsInstanceID::kRandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MprsInstanceID::MprsInstanceID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.MprsInstanceID)
}

void MprsInstanceID::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MprsInstanceID::MprsInstanceID(const MprsInstanceID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.MprsInstanceID)
}

void MprsInstanceID::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  rand_ = GOOGLE_LONGLONG(0);
}

MprsInstanceID::~MprsInstanceID() {
  // @@protoc_insertion_point(destructor:mprs.MprsInstanceID)
  SharedDtor();
}

void MprsInstanceID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MprsInstanceID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MprsInstanceID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MprsInstanceID_descriptor_;
}

const MprsInstanceID& MprsInstanceID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MprsInstanceID* MprsInstanceID::default_instance_ = NULL;

MprsInstanceID* MprsInstanceID::New(::google::protobuf::Arena* arena) const {
  MprsInstanceID* n = new MprsInstanceID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MprsInstanceID::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.MprsInstanceID)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MprsInstanceID, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MprsInstanceID*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_time_, rand_);

#undef ZR_HELPER_
#undef ZR_

}

bool MprsInstanceID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.MprsInstanceID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rand;
        break;
      }

      // optional int64 rand = 2;
      case 2: {
        if (tag == 16) {
         parse_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rand_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.MprsInstanceID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.MprsInstanceID)
  return false;
#undef DO_
}

void MprsInstanceID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.MprsInstanceID)
  // optional int64 start_time = 1;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_time(), output);
  }

  // optional int64 rand = 2;
  if (this->rand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rand(), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.MprsInstanceID)
}

::google::protobuf::uint8* MprsInstanceID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.MprsInstanceID)
  // optional int64 start_time = 1;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_time(), target);
  }

  // optional int64 rand = 2;
  if (this->rand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rand(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.MprsInstanceID)
  return target;
}

int MprsInstanceID::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.MprsInstanceID)
  int total_size = 0;

  // optional int64 start_time = 1;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_time());
  }

  // optional int64 rand = 2;
  if (this->rand() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rand());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MprsInstanceID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.MprsInstanceID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MprsInstanceID* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MprsInstanceID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.MprsInstanceID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.MprsInstanceID)
    MergeFrom(*source);
  }
}

void MprsInstanceID::MergeFrom(const MprsInstanceID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.MprsInstanceID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.rand() != 0) {
    set_rand(from.rand());
  }
}

void MprsInstanceID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.MprsInstanceID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MprsInstanceID::CopyFrom(const MprsInstanceID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.MprsInstanceID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MprsInstanceID::IsInitialized() const {

  return true;
}

void MprsInstanceID::Swap(MprsInstanceID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MprsInstanceID::InternalSwap(MprsInstanceID* other) {
  std::swap(start_time_, other->start_time_);
  std::swap(rand_, other->rand_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MprsInstanceID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MprsInstanceID_descriptor_;
  metadata.reflection = MprsInstanceID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MprsInstanceID

// optional int64 start_time = 1;
void MprsInstanceID::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MprsInstanceID::start_time() const {
  // @@protoc_insertion_point(field_get:mprs.MprsInstanceID.start_time)
  return start_time_;
}
 void MprsInstanceID::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsInstanceID.start_time)
}

// optional int64 rand = 2;
void MprsInstanceID::clear_rand() {
  rand_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MprsInstanceID::rand() const {
  // @@protoc_insertion_point(field_get:mprs.MprsInstanceID.rand)
  return rand_;
}
 void MprsInstanceID::set_rand(::google::protobuf::int64 value) {
  
  rand_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsInstanceID.rand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunningTask::kJobFieldNumber;
const int RunningTask::kNodeFieldNumber;
const int RunningTask::kNodeResourcesFieldNumber;
const int RunningTask::kWorkerShardFieldNumber;
const int RunningTask::kInvocationIdFieldNumber;
const int RunningTask::kNextBackoffDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunningTask::RunningTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.RunningTask)
}

void RunningTask::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  invocation_id_ = const_cast< ::mprs::MprsInstanceID*>(&::mprs::MprsInstanceID::default_instance());
  next_backoff_duration_ = const_cast< ::mprs::BackoffDuration*>(&::mprs::BackoffDuration::default_instance());
}

RunningTask::RunningTask(const RunningTask& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.RunningTask)
}

void RunningTask::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_shard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invocation_id_ = NULL;
  next_backoff_duration_ = NULL;
}

RunningTask::~RunningTask() {
  // @@protoc_insertion_point(destructor:mprs.RunningTask)
  SharedDtor();
}

void RunningTask::SharedDtor() {
  job_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_shard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete invocation_id_;
    delete next_backoff_duration_;
  }
}

void RunningTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunningTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunningTask_descriptor_;
}

const RunningTask& RunningTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RunningTask* RunningTask::default_instance_ = NULL;

RunningTask* RunningTask::New(::google::protobuf::Arena* arena) const {
  RunningTask* n = new RunningTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunningTask::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.RunningTask)
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && invocation_id_ != NULL) delete invocation_id_;
  invocation_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && next_backoff_duration_ != NULL) delete next_backoff_duration_;
  next_backoff_duration_ = NULL;
  node_resources_.Clear();
}

bool RunningTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.RunningTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string job = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job().data(), this->job().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.RunningTask.job"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // optional string node = 2;
      case 2: {
        if (tag == 18) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), this->node().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.RunningTask.node"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_resources;
        break;
      }

      // repeated .mprs.NodeResources node_resources = 3;
      case 3: {
        if (tag == 26) {
         parse_node_resources:
          DO_(input->IncrementRecursionDepth());
         parse_loop_node_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_node_resources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_worker_shard;
        break;
      }

      // optional string worker_shard = 4;
      case 4: {
        if (tag == 34) {
         parse_worker_shard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker_shard()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_shard().data(), this->worker_shard().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.RunningTask.worker_shard"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_invocation_id;
        break;
      }

      // optional .mprs.MprsInstanceID invocation_id = 5;
      case 5: {
        if (tag == 42) {
         parse_invocation_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invocation_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_next_backoff_duration;
        break;
      }

      // optional .mprs.BackoffDuration next_backoff_duration = 6;
      case 6: {
        if (tag == 50) {
         parse_next_backoff_duration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_backoff_duration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.RunningTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.RunningTask)
  return false;
#undef DO_
}

void RunningTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.RunningTask)
  // optional string job = 1;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.RunningTask.job");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->job(), output);
  }

  // optional string node = 2;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.RunningTask.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node(), output);
  }

  // repeated .mprs.NodeResources node_resources = 3;
  for (unsigned int i = 0, n = this->node_resources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node_resources(i), output);
  }

  // optional string worker_shard = 4;
  if (this->worker_shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_shard().data(), this->worker_shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.RunningTask.worker_shard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->worker_shard(), output);
  }

  // optional .mprs.MprsInstanceID invocation_id = 5;
  if (this->has_invocation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->invocation_id_, output);
  }

  // optional .mprs.BackoffDuration next_backoff_duration = 6;
  if (this->has_next_backoff_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->next_backoff_duration_, output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.RunningTask)
}

::google::protobuf::uint8* RunningTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.RunningTask)
  // optional string job = 1;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.RunningTask.job");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->job(), target);
  }

  // optional string node = 2;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.RunningTask.node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node(), target);
  }

  // repeated .mprs.NodeResources node_resources = 3;
  for (unsigned int i = 0, n = this->node_resources_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->node_resources(i), false, target);
  }

  // optional string worker_shard = 4;
  if (this->worker_shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_shard().data(), this->worker_shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.RunningTask.worker_shard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->worker_shard(), target);
  }

  // optional .mprs.MprsInstanceID invocation_id = 5;
  if (this->has_invocation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->invocation_id_, false, target);
  }

  // optional .mprs.BackoffDuration next_backoff_duration = 6;
  if (this->has_next_backoff_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->next_backoff_duration_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.RunningTask)
  return target;
}

int RunningTask::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.RunningTask)
  int total_size = 0;

  // optional string job = 1;
  if (this->job().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job());
  }

  // optional string node = 2;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node());
  }

  // optional string worker_shard = 4;
  if (this->worker_shard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->worker_shard());
  }

  // optional .mprs.MprsInstanceID invocation_id = 5;
  if (this->has_invocation_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->invocation_id_);
  }

  // optional .mprs.BackoffDuration next_backoff_duration = 6;
  if (this->has_next_backoff_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->next_backoff_duration_);
  }

  // repeated .mprs.NodeResources node_resources = 3;
  total_size += 1 * this->node_resources_size();
  for (int i = 0; i < this->node_resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_resources(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunningTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.RunningTask)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunningTask* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunningTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.RunningTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.RunningTask)
    MergeFrom(*source);
  }
}

void RunningTask::MergeFrom(const RunningTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.RunningTask)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  node_resources_.MergeFrom(from.node_resources_);
  if (from.job().size() > 0) {

    job_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_);
  }
  if (from.node().size() > 0) {

    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  if (from.worker_shard().size() > 0) {

    worker_shard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_shard_);
  }
  if (from.has_invocation_id()) {
    mutable_invocation_id()->::mprs::MprsInstanceID::MergeFrom(from.invocation_id());
  }
  if (from.has_next_backoff_duration()) {
    mutable_next_backoff_duration()->::mprs::BackoffDuration::MergeFrom(from.next_backoff_duration());
  }
}

void RunningTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.RunningTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunningTask::CopyFrom(const RunningTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.RunningTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunningTask::IsInitialized() const {

  return true;
}

void RunningTask::Swap(RunningTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunningTask::InternalSwap(RunningTask* other) {
  job_.Swap(&other->job_);
  node_.Swap(&other->node_);
  node_resources_.UnsafeArenaSwap(&other->node_resources_);
  worker_shard_.Swap(&other->worker_shard_);
  std::swap(invocation_id_, other->invocation_id_);
  std::swap(next_backoff_duration_, other->next_backoff_duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunningTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunningTask_descriptor_;
  metadata.reflection = RunningTask_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunningTask

// optional string job = 1;
void RunningTask::clear_job() {
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RunningTask::job() const {
  // @@protoc_insertion_point(field_get:mprs.RunningTask.job)
  return job_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunningTask::set_job(const ::std::string& value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.RunningTask.job)
}
 void RunningTask::set_job(const char* value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.RunningTask.job)
}
 void RunningTask::set_job(const char* value, size_t size) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.RunningTask.job)
}
 ::std::string* RunningTask::mutable_job() {
  
  // @@protoc_insertion_point(field_mutable:mprs.RunningTask.job)
  return job_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RunningTask::release_job() {
  // @@protoc_insertion_point(field_release:mprs.RunningTask.job)
  
  return job_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunningTask::set_allocated_job(::std::string* job) {
  if (job != NULL) {
    
  } else {
    
  }
  job_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job);
  // @@protoc_insertion_point(field_set_allocated:mprs.RunningTask.job)
}

// optional string node = 2;
void RunningTask::clear_node() {
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RunningTask::node() const {
  // @@protoc_insertion_point(field_get:mprs.RunningTask.node)
  return node_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunningTask::set_node(const ::std::string& value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.RunningTask.node)
}
 void RunningTask::set_node(const char* value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.RunningTask.node)
}
 void RunningTask::set_node(const char* value, size_t size) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.RunningTask.node)
}
 ::std::string* RunningTask::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:mprs.RunningTask.node)
  return node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RunningTask::release_node() {
  // @@protoc_insertion_point(field_release:mprs.RunningTask.node)
  
  return node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunningTask::set_allocated_node(::std::string* node) {
  if (node != NULL) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:mprs.RunningTask.node)
}

// repeated .mprs.NodeResources node_resources = 3;
int RunningTask::node_resources_size() const {
  return node_resources_.size();
}
void RunningTask::clear_node_resources() {
  node_resources_.Clear();
}
const ::mprs::NodeResources& RunningTask::node_resources(int index) const {
  // @@protoc_insertion_point(field_get:mprs.RunningTask.node_resources)
  return node_resources_.Get(index);
}
::mprs::NodeResources* RunningTask::mutable_node_resources(int index) {
  // @@protoc_insertion_point(field_mutable:mprs.RunningTask.node_resources)
  return node_resources_.Mutable(index);
}
::mprs::NodeResources* RunningTask::add_node_resources() {
  // @@protoc_insertion_point(field_add:mprs.RunningTask.node_resources)
  return node_resources_.Add();
}
::google::protobuf::RepeatedPtrField< ::mprs::NodeResources >*
RunningTask::mutable_node_resources() {
  // @@protoc_insertion_point(field_mutable_list:mprs.RunningTask.node_resources)
  return &node_resources_;
}
const ::google::protobuf::RepeatedPtrField< ::mprs::NodeResources >&
RunningTask::node_resources() const {
  // @@protoc_insertion_point(field_list:mprs.RunningTask.node_resources)
  return node_resources_;
}

// optional string worker_shard = 4;
void RunningTask::clear_worker_shard() {
  worker_shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RunningTask::worker_shard() const {
  // @@protoc_insertion_point(field_get:mprs.RunningTask.worker_shard)
  return worker_shard_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunningTask::set_worker_shard(const ::std::string& value) {
  
  worker_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.RunningTask.worker_shard)
}
 void RunningTask::set_worker_shard(const char* value) {
  
  worker_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.RunningTask.worker_shard)
}
 void RunningTask::set_worker_shard(const char* value, size_t size) {
  
  worker_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.RunningTask.worker_shard)
}
 ::std::string* RunningTask::mutable_worker_shard() {
  
  // @@protoc_insertion_point(field_mutable:mprs.RunningTask.worker_shard)
  return worker_shard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RunningTask::release_worker_shard() {
  // @@protoc_insertion_point(field_release:mprs.RunningTask.worker_shard)
  
  return worker_shard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunningTask::set_allocated_worker_shard(::std::string* worker_shard) {
  if (worker_shard != NULL) {
    
  } else {
    
  }
  worker_shard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_shard);
  // @@protoc_insertion_point(field_set_allocated:mprs.RunningTask.worker_shard)
}

// optional .mprs.MprsInstanceID invocation_id = 5;
bool RunningTask::has_invocation_id() const {
  return !_is_default_instance_ && invocation_id_ != NULL;
}
void RunningTask::clear_invocation_id() {
  if (GetArenaNoVirtual() == NULL && invocation_id_ != NULL) delete invocation_id_;
  invocation_id_ = NULL;
}
const ::mprs::MprsInstanceID& RunningTask::invocation_id() const {
  // @@protoc_insertion_point(field_get:mprs.RunningTask.invocation_id)
  return invocation_id_ != NULL ? *invocation_id_ : *default_instance_->invocation_id_;
}
::mprs::MprsInstanceID* RunningTask::mutable_invocation_id() {
  
  if (invocation_id_ == NULL) {
    invocation_id_ = new ::mprs::MprsInstanceID;
  }
  // @@protoc_insertion_point(field_mutable:mprs.RunningTask.invocation_id)
  return invocation_id_;
}
::mprs::MprsInstanceID* RunningTask::release_invocation_id() {
  // @@protoc_insertion_point(field_release:mprs.RunningTask.invocation_id)
  
  ::mprs::MprsInstanceID* temp = invocation_id_;
  invocation_id_ = NULL;
  return temp;
}
void RunningTask::set_allocated_invocation_id(::mprs::MprsInstanceID* invocation_id) {
  delete invocation_id_;
  invocation_id_ = invocation_id;
  if (invocation_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mprs.RunningTask.invocation_id)
}

// optional .mprs.BackoffDuration next_backoff_duration = 6;
bool RunningTask::has_next_backoff_duration() const {
  return !_is_default_instance_ && next_backoff_duration_ != NULL;
}
void RunningTask::clear_next_backoff_duration() {
  if (GetArenaNoVirtual() == NULL && next_backoff_duration_ != NULL) delete next_backoff_duration_;
  next_backoff_duration_ = NULL;
}
const ::mprs::BackoffDuration& RunningTask::next_backoff_duration() const {
  // @@protoc_insertion_point(field_get:mprs.RunningTask.next_backoff_duration)
  return next_backoff_duration_ != NULL ? *next_backoff_duration_ : *default_instance_->next_backoff_duration_;
}
::mprs::BackoffDuration* RunningTask::mutable_next_backoff_duration() {
  
  if (next_backoff_duration_ == NULL) {
    next_backoff_duration_ = new ::mprs::BackoffDuration;
  }
  // @@protoc_insertion_point(field_mutable:mprs.RunningTask.next_backoff_duration)
  return next_backoff_duration_;
}
::mprs::BackoffDuration* RunningTask::release_next_backoff_duration() {
  // @@protoc_insertion_point(field_release:mprs.RunningTask.next_backoff_duration)
  
  ::mprs::BackoffDuration* temp = next_backoff_duration_;
  next_backoff_duration_ = NULL;
  return temp;
}
void RunningTask::set_allocated_next_backoff_duration(::mprs::BackoffDuration* next_backoff_duration) {
  delete next_backoff_duration_;
  next_backoff_duration_ = next_backoff_duration;
  if (next_backoff_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mprs.RunningTask.next_backoff_duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MachinePortLock::kHostnameFieldNumber;
const int MachinePortLock::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MachinePortLock::MachinePortLock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.MachinePortLock)
}

void MachinePortLock::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MachinePortLock::MachinePortLock(const MachinePortLock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.MachinePortLock)
}

void MachinePortLock::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

MachinePortLock::~MachinePortLock() {
  // @@protoc_insertion_point(destructor:mprs.MachinePortLock)
  SharedDtor();
}

void MachinePortLock::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MachinePortLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachinePortLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachinePortLock_descriptor_;
}

const MachinePortLock& MachinePortLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MachinePortLock* MachinePortLock::default_instance_ = NULL;

MachinePortLock* MachinePortLock::New(::google::protobuf::Arena* arena) const {
  MachinePortLock* n = new MachinePortLock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MachinePortLock::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.MachinePortLock)
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

bool MachinePortLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.MachinePortLock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MachinePortLock.hostname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.MachinePortLock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.MachinePortLock)
  return false;
#undef DO_
}

void MachinePortLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.MachinePortLock)
  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MachinePortLock.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.MachinePortLock)
}

::google::protobuf::uint8* MachinePortLock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.MachinePortLock)
  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MachinePortLock.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.MachinePortLock)
  return target;
}

int MachinePortLock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.MachinePortLock)
  int total_size = 0;

  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachinePortLock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.MachinePortLock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MachinePortLock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MachinePortLock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.MachinePortLock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.MachinePortLock)
    MergeFrom(*source);
  }
}

void MachinePortLock::MergeFrom(const MachinePortLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.MachinePortLock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void MachinePortLock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.MachinePortLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachinePortLock::CopyFrom(const MachinePortLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.MachinePortLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachinePortLock::IsInitialized() const {

  return true;
}

void MachinePortLock::Swap(MachinePortLock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MachinePortLock::InternalSwap(MachinePortLock* other) {
  hostname_.Swap(&other->hostname_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MachinePortLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachinePortLock_descriptor_;
  metadata.reflection = MachinePortLock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MachinePortLock

// optional string hostname = 1;
void MachinePortLock::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MachinePortLock::hostname() const {
  // @@protoc_insertion_point(field_get:mprs.MachinePortLock.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MachinePortLock::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MachinePortLock.hostname)
}
 void MachinePortLock::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MachinePortLock.hostname)
}
 void MachinePortLock::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MachinePortLock.hostname)
}
 ::std::string* MachinePortLock::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MachinePortLock.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MachinePortLock::release_hostname() {
  // @@protoc_insertion_point(field_release:mprs.MachinePortLock.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MachinePortLock::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:mprs.MachinePortLock.hostname)
}

// optional int32 port = 2;
void MachinePortLock::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 MachinePortLock::port() const {
  // @@protoc_insertion_point(field_get:mprs.MachinePortLock.port)
  return port_;
}
 void MachinePortLock::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:mprs.MachinePortLock.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceAddress::kIpOrHostFieldNumber;
const int ServiceAddress::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceAddress::ServiceAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.ServiceAddress)
}

void ServiceAddress::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServiceAddress::ServiceAddress(const ServiceAddress& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.ServiceAddress)
}

void ServiceAddress::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_or_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

ServiceAddress::~ServiceAddress() {
  // @@protoc_insertion_point(destructor:mprs.ServiceAddress)
  SharedDtor();
}

void ServiceAddress::SharedDtor() {
  ip_or_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServiceAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceAddress_descriptor_;
}

const ServiceAddress& ServiceAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ServiceAddress* ServiceAddress::default_instance_ = NULL;

ServiceAddress* ServiceAddress::New(::google::protobuf::Arena* arena) const {
  ServiceAddress* n = new ServiceAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.ServiceAddress)
  ip_or_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

bool ServiceAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.ServiceAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip_or_host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_or_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_or_host().data(), this->ip_or_host().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.ServiceAddress.ip_or_host"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.ServiceAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.ServiceAddress)
  return false;
#undef DO_
}

void ServiceAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.ServiceAddress)
  // optional string ip_or_host = 1;
  if (this->ip_or_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_or_host().data(), this->ip_or_host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.ServiceAddress.ip_or_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_or_host(), output);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.ServiceAddress)
}

::google::protobuf::uint8* ServiceAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.ServiceAddress)
  // optional string ip_or_host = 1;
  if (this->ip_or_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_or_host().data(), this->ip_or_host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.ServiceAddress.ip_or_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_or_host(), target);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.ServiceAddress)
  return target;
}

int ServiceAddress::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.ServiceAddress)
  int total_size = 0;

  // optional string ip_or_host = 1;
  if (this->ip_or_host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_or_host());
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.ServiceAddress)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServiceAddress* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.ServiceAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.ServiceAddress)
    MergeFrom(*source);
  }
}

void ServiceAddress::MergeFrom(const ServiceAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.ServiceAddress)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ip_or_host().size() > 0) {

    ip_or_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_or_host_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void ServiceAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.ServiceAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceAddress::CopyFrom(const ServiceAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.ServiceAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceAddress::IsInitialized() const {

  return true;
}

void ServiceAddress::Swap(ServiceAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceAddress::InternalSwap(ServiceAddress* other) {
  ip_or_host_.Swap(&other->ip_or_host_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceAddress_descriptor_;
  metadata.reflection = ServiceAddress_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceAddress

// optional string ip_or_host = 1;
void ServiceAddress::clear_ip_or_host() {
  ip_or_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ServiceAddress::ip_or_host() const {
  // @@protoc_insertion_point(field_get:mprs.ServiceAddress.ip_or_host)
  return ip_or_host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceAddress::set_ip_or_host(const ::std::string& value) {
  
  ip_or_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.ServiceAddress.ip_or_host)
}
 void ServiceAddress::set_ip_or_host(const char* value) {
  
  ip_or_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.ServiceAddress.ip_or_host)
}
 void ServiceAddress::set_ip_or_host(const char* value, size_t size) {
  
  ip_or_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.ServiceAddress.ip_or_host)
}
 ::std::string* ServiceAddress::mutable_ip_or_host() {
  
  // @@protoc_insertion_point(field_mutable:mprs.ServiceAddress.ip_or_host)
  return ip_or_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServiceAddress::release_ip_or_host() {
  // @@protoc_insertion_point(field_release:mprs.ServiceAddress.ip_or_host)
  
  return ip_or_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceAddress::set_allocated_ip_or_host(::std::string* ip_or_host) {
  if (ip_or_host != NULL) {
    
  } else {
    
  }
  ip_or_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_or_host);
  // @@protoc_insertion_point(field_set_allocated:mprs.ServiceAddress.ip_or_host)
}

// optional int32 port = 2;
void ServiceAddress::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 ServiceAddress::port() const {
  // @@protoc_insertion_point(field_get:mprs.ServiceAddress.port)
  return port_;
}
 void ServiceAddress::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:mprs.ServiceAddress.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MprsWorker::kShardFieldNumber;
const int MprsWorker::kMachineLockFieldNumber;
const int MprsWorker::kAddrFieldNumber;
const int MprsWorker::kIdFieldNumber;
const int MprsWorker::kHeartbeatPeriodSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MprsWorker::MprsWorker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.MprsWorker)
}

void MprsWorker::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  machine_lock_ = const_cast< ::mprs::MachinePortLock*>(&::mprs::MachinePortLock::default_instance());
  addr_ = const_cast< ::mprs::ServiceAddress*>(&::mprs::ServiceAddress::default_instance());
  id_ = const_cast< ::mprs::MprsInstanceID*>(&::mprs::MprsInstanceID::default_instance());
}

MprsWorker::MprsWorker(const MprsWorker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.MprsWorker)
}

void MprsWorker::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  shard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_lock_ = NULL;
  addr_ = NULL;
  id_ = NULL;
  heartbeat_period_second_ = 0;
}

MprsWorker::~MprsWorker() {
  // @@protoc_insertion_point(destructor:mprs.MprsWorker)
  SharedDtor();
}

void MprsWorker::SharedDtor() {
  shard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete machine_lock_;
    delete addr_;
    delete id_;
  }
}

void MprsWorker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MprsWorker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MprsWorker_descriptor_;
}

const MprsWorker& MprsWorker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MprsWorker* MprsWorker::default_instance_ = NULL;

MprsWorker* MprsWorker::New(::google::protobuf::Arena* arena) const {
  MprsWorker* n = new MprsWorker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MprsWorker::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.MprsWorker)
  shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && machine_lock_ != NULL) delete machine_lock_;
  machine_lock_ = NULL;
  if (GetArenaNoVirtual() == NULL && addr_ != NULL) delete addr_;
  addr_ = NULL;
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
  heartbeat_period_second_ = 0;
}

bool MprsWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.MprsWorker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string shard = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shard()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shard().data(), this->shard().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mprs.MprsWorker.shard"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_machine_lock;
        break;
      }

      // optional .mprs.MachinePortLock machine_lock = 2;
      case 2: {
        if (tag == 18) {
         parse_machine_lock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_addr;
        break;
      }

      // optional .mprs.ServiceAddress addr = 3;
      case 3: {
        if (tag == 26) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id;
        break;
      }

      // optional .mprs.MprsInstanceID id = 4;
      case 4: {
        if (tag == 34) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heartbeat_period_second;
        break;
      }

      // optional int32 heartbeat_period_second = 5;
      case 5: {
        if (tag == 40) {
         parse_heartbeat_period_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartbeat_period_second_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.MprsWorker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.MprsWorker)
  return false;
#undef DO_
}

void MprsWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.MprsWorker)
  // optional string shard = 1;
  if (this->shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard().data(), this->shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsWorker.shard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->shard(), output);
  }

  // optional .mprs.MachinePortLock machine_lock = 2;
  if (this->has_machine_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->machine_lock_, output);
  }

  // optional .mprs.ServiceAddress addr = 3;
  if (this->has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->addr_, output);
  }

  // optional .mprs.MprsInstanceID id = 4;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->id_, output);
  }

  // optional int32 heartbeat_period_second = 5;
  if (this->heartbeat_period_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->heartbeat_period_second(), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.MprsWorker)
}

::google::protobuf::uint8* MprsWorker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.MprsWorker)
  // optional string shard = 1;
  if (this->shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard().data(), this->shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mprs.MprsWorker.shard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->shard(), target);
  }

  // optional .mprs.MachinePortLock machine_lock = 2;
  if (this->has_machine_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->machine_lock_, false, target);
  }

  // optional .mprs.ServiceAddress addr = 3;
  if (this->has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->addr_, false, target);
  }

  // optional .mprs.MprsInstanceID id = 4;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->id_, false, target);
  }

  // optional int32 heartbeat_period_second = 5;
  if (this->heartbeat_period_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->heartbeat_period_second(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.MprsWorker)
  return target;
}

int MprsWorker::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.MprsWorker)
  int total_size = 0;

  // optional string shard = 1;
  if (this->shard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shard());
  }

  // optional .mprs.MachinePortLock machine_lock = 2;
  if (this->has_machine_lock()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->machine_lock_);
  }

  // optional .mprs.ServiceAddress addr = 3;
  if (this->has_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->addr_);
  }

  // optional .mprs.MprsInstanceID id = 4;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // optional int32 heartbeat_period_second = 5;
  if (this->heartbeat_period_second() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->heartbeat_period_second());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MprsWorker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.MprsWorker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MprsWorker* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MprsWorker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.MprsWorker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.MprsWorker)
    MergeFrom(*source);
  }
}

void MprsWorker::MergeFrom(const MprsWorker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.MprsWorker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.shard().size() > 0) {

    shard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shard_);
  }
  if (from.has_machine_lock()) {
    mutable_machine_lock()->::mprs::MachinePortLock::MergeFrom(from.machine_lock());
  }
  if (from.has_addr()) {
    mutable_addr()->::mprs::ServiceAddress::MergeFrom(from.addr());
  }
  if (from.has_id()) {
    mutable_id()->::mprs::MprsInstanceID::MergeFrom(from.id());
  }
  if (from.heartbeat_period_second() != 0) {
    set_heartbeat_period_second(from.heartbeat_period_second());
  }
}

void MprsWorker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.MprsWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MprsWorker::CopyFrom(const MprsWorker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.MprsWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MprsWorker::IsInitialized() const {

  return true;
}

void MprsWorker::Swap(MprsWorker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MprsWorker::InternalSwap(MprsWorker* other) {
  shard_.Swap(&other->shard_);
  std::swap(machine_lock_, other->machine_lock_);
  std::swap(addr_, other->addr_);
  std::swap(id_, other->id_);
  std::swap(heartbeat_period_second_, other->heartbeat_period_second_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MprsWorker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MprsWorker_descriptor_;
  metadata.reflection = MprsWorker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MprsWorker

// optional string shard = 1;
void MprsWorker::clear_shard() {
  shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MprsWorker::shard() const {
  // @@protoc_insertion_point(field_get:mprs.MprsWorker.shard)
  return shard_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsWorker::set_shard(const ::std::string& value) {
  
  shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mprs.MprsWorker.shard)
}
 void MprsWorker::set_shard(const char* value) {
  
  shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mprs.MprsWorker.shard)
}
 void MprsWorker::set_shard(const char* value, size_t size) {
  
  shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mprs.MprsWorker.shard)
}
 ::std::string* MprsWorker::mutable_shard() {
  
  // @@protoc_insertion_point(field_mutable:mprs.MprsWorker.shard)
  return shard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MprsWorker::release_shard() {
  // @@protoc_insertion_point(field_release:mprs.MprsWorker.shard)
  
  return shard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MprsWorker::set_allocated_shard(::std::string* shard) {
  if (shard != NULL) {
    
  } else {
    
  }
  shard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shard);
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsWorker.shard)
}

// optional .mprs.MachinePortLock machine_lock = 2;
bool MprsWorker::has_machine_lock() const {
  return !_is_default_instance_ && machine_lock_ != NULL;
}
void MprsWorker::clear_machine_lock() {
  if (GetArenaNoVirtual() == NULL && machine_lock_ != NULL) delete machine_lock_;
  machine_lock_ = NULL;
}
const ::mprs::MachinePortLock& MprsWorker::machine_lock() const {
  // @@protoc_insertion_point(field_get:mprs.MprsWorker.machine_lock)
  return machine_lock_ != NULL ? *machine_lock_ : *default_instance_->machine_lock_;
}
::mprs::MachinePortLock* MprsWorker::mutable_machine_lock() {
  
  if (machine_lock_ == NULL) {
    machine_lock_ = new ::mprs::MachinePortLock;
  }
  // @@protoc_insertion_point(field_mutable:mprs.MprsWorker.machine_lock)
  return machine_lock_;
}
::mprs::MachinePortLock* MprsWorker::release_machine_lock() {
  // @@protoc_insertion_point(field_release:mprs.MprsWorker.machine_lock)
  
  ::mprs::MachinePortLock* temp = machine_lock_;
  machine_lock_ = NULL;
  return temp;
}
void MprsWorker::set_allocated_machine_lock(::mprs::MachinePortLock* machine_lock) {
  delete machine_lock_;
  machine_lock_ = machine_lock;
  if (machine_lock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsWorker.machine_lock)
}

// optional .mprs.ServiceAddress addr = 3;
bool MprsWorker::has_addr() const {
  return !_is_default_instance_ && addr_ != NULL;
}
void MprsWorker::clear_addr() {
  if (GetArenaNoVirtual() == NULL && addr_ != NULL) delete addr_;
  addr_ = NULL;
}
const ::mprs::ServiceAddress& MprsWorker::addr() const {
  // @@protoc_insertion_point(field_get:mprs.MprsWorker.addr)
  return addr_ != NULL ? *addr_ : *default_instance_->addr_;
}
::mprs::ServiceAddress* MprsWorker::mutable_addr() {
  
  if (addr_ == NULL) {
    addr_ = new ::mprs::ServiceAddress;
  }
  // @@protoc_insertion_point(field_mutable:mprs.MprsWorker.addr)
  return addr_;
}
::mprs::ServiceAddress* MprsWorker::release_addr() {
  // @@protoc_insertion_point(field_release:mprs.MprsWorker.addr)
  
  ::mprs::ServiceAddress* temp = addr_;
  addr_ = NULL;
  return temp;
}
void MprsWorker::set_allocated_addr(::mprs::ServiceAddress* addr) {
  delete addr_;
  addr_ = addr;
  if (addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsWorker.addr)
}

// optional .mprs.MprsInstanceID id = 4;
bool MprsWorker::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
void MprsWorker::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::mprs::MprsInstanceID& MprsWorker::id() const {
  // @@protoc_insertion_point(field_get:mprs.MprsWorker.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::mprs::MprsInstanceID* MprsWorker::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::mprs::MprsInstanceID;
  }
  // @@protoc_insertion_point(field_mutable:mprs.MprsWorker.id)
  return id_;
}
::mprs::MprsInstanceID* MprsWorker::release_id() {
  // @@protoc_insertion_point(field_release:mprs.MprsWorker.id)
  
  ::mprs::MprsInstanceID* temp = id_;
  id_ = NULL;
  return temp;
}
void MprsWorker::set_allocated_id(::mprs::MprsInstanceID* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mprs.MprsWorker.id)
}

// optional int32 heartbeat_period_second = 5;
void MprsWorker::clear_heartbeat_period_second() {
  heartbeat_period_second_ = 0;
}
 ::google::protobuf::int32 MprsWorker::heartbeat_period_second() const {
  // @@protoc_insertion_point(field_get:mprs.MprsWorker.heartbeat_period_second)
  return heartbeat_period_second_;
}
 void MprsWorker::set_heartbeat_period_second(::google::protobuf::int32 value) {
  
  heartbeat_period_second_ = value;
  // @@protoc_insertion_point(field_set:mprs.MprsWorker.heartbeat_period_second)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchedulerHeartbeatResponse::kIdFieldNumber;
const int SchedulerHeartbeatResponse::kMaxHealthCheckGapFieldNumber;
const int SchedulerHeartbeatResponse::kHeartbeatGracePeriodFieldNumber;
const int SchedulerHeartbeatResponse::kLoseUnhealthyWorkerAfterFieldNumber;
const int SchedulerHeartbeatResponse::kWorkerCheckIntervalFieldNumber;
const int SchedulerHeartbeatResponse::kWorkerStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchedulerHeartbeatResponse::SchedulerHeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprs.SchedulerHeartbeatResponse)
}

void SchedulerHeartbeatResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  id_ = const_cast< ::mprs::MprsInstanceID*>(&::mprs::MprsInstanceID::default_instance());
}

SchedulerHeartbeatResponse::SchedulerHeartbeatResponse(const SchedulerHeartbeatResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprs.SchedulerHeartbeatResponse)
}

void SchedulerHeartbeatResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = NULL;
  max_health_check_gap_ = 0;
  heartbeat_grace_period_ = 0;
  lose_unhealthy_worker_after_ = 0;
  worker_check_interval_ = 0;
  worker_state_ = 0;
}

SchedulerHeartbeatResponse::~SchedulerHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:mprs.SchedulerHeartbeatResponse)
  SharedDtor();
}

void SchedulerHeartbeatResponse::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void SchedulerHeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchedulerHeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchedulerHeartbeatResponse_descriptor_;
}

const SchedulerHeartbeatResponse& SchedulerHeartbeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SchedulerHeartbeatResponse* SchedulerHeartbeatResponse::default_instance_ = NULL;

SchedulerHeartbeatResponse* SchedulerHeartbeatResponse::New(::google::protobuf::Arena* arena) const {
  SchedulerHeartbeatResponse* n = new SchedulerHeartbeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchedulerHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mprs.SchedulerHeartbeatResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SchedulerHeartbeatResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SchedulerHeartbeatResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_health_check_gap_, worker_state_);
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SchedulerHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprs.SchedulerHeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mprs.MprsInstanceID id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_health_check_gap;
        break;
      }

      // optional int32 max_health_check_gap = 2;
      case 2: {
        if (tag == 16) {
         parse_max_health_check_gap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_health_check_gap_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_heartbeat_grace_period;
        break;
      }

      // optional int32 heartbeat_grace_period = 3;
      case 3: {
        if (tag == 24) {
         parse_heartbeat_grace_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartbeat_grace_period_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lose_unhealthy_worker_after;
        break;
      }

      // optional int32 lose_unhealthy_worker_after = 4;
      case 4: {
        if (tag == 32) {
         parse_lose_unhealthy_worker_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_unhealthy_worker_after_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_worker_check_interval;
        break;
      }

      // optional int32 worker_check_interval = 5;
      case 5: {
        if (tag == 40) {
         parse_worker_check_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_check_interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_worker_state;
        break;
      }

      // optional int32 worker_state = 6;
      case 6: {
        if (tag == 48) {
         parse_worker_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprs.SchedulerHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprs.SchedulerHeartbeatResponse)
  return false;
#undef DO_
}

void SchedulerHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprs.SchedulerHeartbeatResponse)
  // optional .mprs.MprsInstanceID id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional int32 max_health_check_gap = 2;
  if (this->max_health_check_gap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_health_check_gap(), output);
  }

  // optional int32 heartbeat_grace_period = 3;
  if (this->heartbeat_grace_period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->heartbeat_grace_period(), output);
  }

  // optional int32 lose_unhealthy_worker_after = 4;
  if (this->lose_unhealthy_worker_after() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lose_unhealthy_worker_after(), output);
  }

  // optional int32 worker_check_interval = 5;
  if (this->worker_check_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->worker_check_interval(), output);
  }

  // optional int32 worker_state = 6;
  if (this->worker_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->worker_state(), output);
  }

  // @@protoc_insertion_point(serialize_end:mprs.SchedulerHeartbeatResponse)
}

::google::protobuf::uint8* SchedulerHeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprs.SchedulerHeartbeatResponse)
  // optional .mprs.MprsInstanceID id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional int32 max_health_check_gap = 2;
  if (this->max_health_check_gap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_health_check_gap(), target);
  }

  // optional int32 heartbeat_grace_period = 3;
  if (this->heartbeat_grace_period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->heartbeat_grace_period(), target);
  }

  // optional int32 lose_unhealthy_worker_after = 4;
  if (this->lose_unhealthy_worker_after() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lose_unhealthy_worker_after(), target);
  }

  // optional int32 worker_check_interval = 5;
  if (this->worker_check_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->worker_check_interval(), target);
  }

  // optional int32 worker_state = 6;
  if (this->worker_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->worker_state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mprs.SchedulerHeartbeatResponse)
  return target;
}

int SchedulerHeartbeatResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mprs.SchedulerHeartbeatResponse)
  int total_size = 0;

  // optional .mprs.MprsInstanceID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // optional int32 max_health_check_gap = 2;
  if (this->max_health_check_gap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_health_check_gap());
  }

  // optional int32 heartbeat_grace_period = 3;
  if (this->heartbeat_grace_period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->heartbeat_grace_period());
  }

  // optional int32 lose_unhealthy_worker_after = 4;
  if (this->lose_unhealthy_worker_after() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lose_unhealthy_worker_after());
  }

  // optional int32 worker_check_interval = 5;
  if (this->worker_check_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->worker_check_interval());
  }

  // optional int32 worker_state = 6;
  if (this->worker_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->worker_state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchedulerHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mprs.SchedulerHeartbeatResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SchedulerHeartbeatResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SchedulerHeartbeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mprs.SchedulerHeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mprs.SchedulerHeartbeatResponse)
    MergeFrom(*source);
  }
}

void SchedulerHeartbeatResponse::MergeFrom(const SchedulerHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mprs.SchedulerHeartbeatResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_id()) {
    mutable_id()->::mprs::MprsInstanceID::MergeFrom(from.id());
  }
  if (from.max_health_check_gap() != 0) {
    set_max_health_check_gap(from.max_health_check_gap());
  }
  if (from.heartbeat_grace_period() != 0) {
    set_heartbeat_grace_period(from.heartbeat_grace_period());
  }
  if (from.lose_unhealthy_worker_after() != 0) {
    set_lose_unhealthy_worker_after(from.lose_unhealthy_worker_after());
  }
  if (from.worker_check_interval() != 0) {
    set_worker_check_interval(from.worker_check_interval());
  }
  if (from.worker_state() != 0) {
    set_worker_state(from.worker_state());
  }
}

void SchedulerHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mprs.SchedulerHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchedulerHeartbeatResponse::CopyFrom(const SchedulerHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mprs.SchedulerHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulerHeartbeatResponse::IsInitialized() const {

  return true;
}

void SchedulerHeartbeatResponse::Swap(SchedulerHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchedulerHeartbeatResponse::InternalSwap(SchedulerHeartbeatResponse* other) {
  std::swap(id_, other->id_);
  std::swap(max_health_check_gap_, other->max_health_check_gap_);
  std::swap(heartbeat_grace_period_, other->heartbeat_grace_period_);
  std::swap(lose_unhealthy_worker_after_, other->lose_unhealthy_worker_after_);
  std::swap(worker_check_interval_, other->worker_check_interval_);
  std::swap(worker_state_, other->worker_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchedulerHeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchedulerHeartbeatResponse_descriptor_;
  metadata.reflection = SchedulerHeartbeatResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchedulerHeartbeatResponse

// optional .mprs.MprsInstanceID id = 1;
bool SchedulerHeartbeatResponse::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
void SchedulerHeartbeatResponse::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::mprs::MprsInstanceID& SchedulerHeartbeatResponse::id() const {
  // @@protoc_insertion_point(field_get:mprs.SchedulerHeartbeatResponse.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::mprs::MprsInstanceID* SchedulerHeartbeatResponse::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::mprs::MprsInstanceID;
  }
  // @@protoc_insertion_point(field_mutable:mprs.SchedulerHeartbeatResponse.id)
  return id_;
}
::mprs::MprsInstanceID* SchedulerHeartbeatResponse::release_id() {
  // @@protoc_insertion_point(field_release:mprs.SchedulerHeartbeatResponse.id)
  
  ::mprs::MprsInstanceID* temp = id_;
  id_ = NULL;
  return temp;
}
void SchedulerHeartbeatResponse::set_allocated_id(::mprs::MprsInstanceID* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mprs.SchedulerHeartbeatResponse.id)
}

// optional int32 max_health_check_gap = 2;
void SchedulerHeartbeatResponse::clear_max_health_check_gap() {
  max_health_check_gap_ = 0;
}
 ::google::protobuf::int32 SchedulerHeartbeatResponse::max_health_check_gap() const {
  // @@protoc_insertion_point(field_get:mprs.SchedulerHeartbeatResponse.max_health_check_gap)
  return max_health_check_gap_;
}
 void SchedulerHeartbeatResponse::set_max_health_check_gap(::google::protobuf::int32 value) {
  
  max_health_check_gap_ = value;
  // @@protoc_insertion_point(field_set:mprs.SchedulerHeartbeatResponse.max_health_check_gap)
}

// optional int32 heartbeat_grace_period = 3;
void SchedulerHeartbeatResponse::clear_heartbeat_grace_period() {
  heartbeat_grace_period_ = 0;
}
 ::google::protobuf::int32 SchedulerHeartbeatResponse::heartbeat_grace_period() const {
  // @@protoc_insertion_point(field_get:mprs.SchedulerHeartbeatResponse.heartbeat_grace_period)
  return heartbeat_grace_period_;
}
 void SchedulerHeartbeatResponse::set_heartbeat_grace_period(::google::protobuf::int32 value) {
  
  heartbeat_grace_period_ = value;
  // @@protoc_insertion_point(field_set:mprs.SchedulerHeartbeatResponse.heartbeat_grace_period)
}

// optional int32 lose_unhealthy_worker_after = 4;
void SchedulerHeartbeatResponse::clear_lose_unhealthy_worker_after() {
  lose_unhealthy_worker_after_ = 0;
}
 ::google::protobuf::int32 SchedulerHeartbeatResponse::lose_unhealthy_worker_after() const {
  // @@protoc_insertion_point(field_get:mprs.SchedulerHeartbeatResponse.lose_unhealthy_worker_after)
  return lose_unhealthy_worker_after_;
}
 void SchedulerHeartbeatResponse::set_lose_unhealthy_worker_after(::google::protobuf::int32 value) {
  
  lose_unhealthy_worker_after_ = value;
  // @@protoc_insertion_point(field_set:mprs.SchedulerHeartbeatResponse.lose_unhealthy_worker_after)
}

// optional int32 worker_check_interval = 5;
void SchedulerHeartbeatResponse::clear_worker_check_interval() {
  worker_check_interval_ = 0;
}
 ::google::protobuf::int32 SchedulerHeartbeatResponse::worker_check_interval() const {
  // @@protoc_insertion_point(field_get:mprs.SchedulerHeartbeatResponse.worker_check_interval)
  return worker_check_interval_;
}
 void SchedulerHeartbeatResponse::set_worker_check_interval(::google::protobuf::int32 value) {
  
  worker_check_interval_ = value;
  // @@protoc_insertion_point(field_set:mprs.SchedulerHeartbeatResponse.worker_check_interval)
}

// optional int32 worker_state = 6;
void SchedulerHeartbeatResponse::clear_worker_state() {
  worker_state_ = 0;
}
 ::google::protobuf::int32 SchedulerHeartbeatResponse::worker_state() const {
  // @@protoc_insertion_point(field_get:mprs.SchedulerHeartbeatResponse.worker_state)
  return worker_state_;
}
 void SchedulerHeartbeatResponse::set_worker_state(::google::protobuf::int32 value) {
  
  worker_state_ = value;
  // @@protoc_insertion_point(field_set:mprs.SchedulerHeartbeatResponse.worker_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mprs

// @@protoc_insertion_point(global_scope)
